# JMH version: 1.21
# VM version: JDK 1.8.0_202, OpenJDK 64-Bit Server VM, 25.202-b05
# VM invoker: /Users/rmerino/.sdkman/candidates/java/8.0.202-zulu/jre/bin/java
# VM options: -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc-log-mutable-ecollections_hash_map-100.log
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jsonvalues.benchmark.mutable.parsing.StringToJsObj_100.ecollections_hash_map

# Run progress: 0,00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 176948,516 ops/s
# Warmup Iteration   2: 208173,689 ops/s
# Warmup Iteration   3: 211761,570 ops/s
# Warmup Iteration   4: 209161,846 ops/s
# Warmup Iteration   5: 210073,535 ops/s
Iteration   1: 209933,864 ops/s
Iteration   2: 209782,593 ops/s
Iteration   3: 208324,652 ops/s
Iteration   4: 210061,820 ops/s
Iteration   5: 210644,771 ops/s

# Run progress: 20,00% complete, ETA 00:06:42
# Fork: 2 of 5
# Warmup Iteration   1: 201264,202 ops/s
# Warmup Iteration   2: 213491,558 ops/s
# Warmup Iteration   3: 213144,153 ops/s
# Warmup Iteration   4: 211801,110 ops/s
# Warmup Iteration   5: 213051,493 ops/s
Iteration   1: 213542,666 ops/s
Iteration   2: 213224,108 ops/s
Iteration   3: 212923,446 ops/s
Iteration   4: 213332,680 ops/s
Iteration   5: 210894,476 ops/s

# Run progress: 40,00% complete, ETA 00:05:01
# Fork: 3 of 5
# Warmup Iteration   1: 208143,433 ops/s
# Warmup Iteration   2: 220719,676 ops/s
# Warmup Iteration   3: 220372,198 ops/s
# Warmup Iteration   4: 220792,738 ops/s
# Warmup Iteration   5: 220314,073 ops/s
Iteration   1: 218373,498 ops/s
Iteration   2: 220546,607 ops/s
Iteration   3: 219626,175 ops/s
Iteration   4: 219699,273 ops/s
Iteration   5: 219950,260 ops/s

# Run progress: 60,00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 197496,010 ops/s
# Warmup Iteration   2: 207831,668 ops/s
# Warmup Iteration   3: 210153,325 ops/s
# Warmup Iteration   4: 210493,835 ops/s
# Warmup Iteration   5: 210266,759 ops/s
Iteration   1: 210353,643 ops/s
Iteration   2: 210171,579 ops/s
Iteration   3: 208127,124 ops/s
Iteration   4: 210118,462 ops/s
Iteration   5: 209557,937 ops/s

# Run progress: 80,00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 200961,299 ops/s
# Warmup Iteration   2: 214629,961 ops/s
# Warmup Iteration   3: 213165,203 ops/s
# Warmup Iteration   4: 208784,334 ops/s
# Warmup Iteration   5: 206229,649 ops/s
Iteration   1: 210746,391 ops/s
Iteration   2: 210939,795 ops/s
Iteration   3: 211280,534 ops/s
Iteration   4: 210791,454 ops/s
Iteration   5: 204937,813 ops/s


Result "jsonvalues.benchmark.mutable.parsing.StringToJsObj_100.ecollections_hash_map":
  212315,425 ±(99.9%) 3107,191 ops/s [Average]
  (min, avg, max) = (204937,813, 212315,425, 220546,607), stdev = 4148,011
  CI (99.9%): [209208,234, 215422,616] (assumes normal distribution)


# Run complete. Total time: 00:08:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                 Mode  Cnt       Score      Error  Units
StringToJsObj_100.ecollections_hash_map  thrpt   25  212315,425 ± 3107,191  ops/s
