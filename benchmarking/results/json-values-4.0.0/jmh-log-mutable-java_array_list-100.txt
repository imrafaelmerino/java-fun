# JMH version: 1.21
# VM version: JDK 1.8.0_202, OpenJDK 64-Bit Server VM, 25.202-b05
# VM invoker: /Users/rmerino/.sdkman/candidates/java/8.0.202-zulu/jre/bin/java
# VM options: -Xms256m -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc-log-mutable-java_array_list-100.log
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jsonvalues.benchmark.mutable.parsing.StringToJsArray_100.java_array_list

# Run progress: 0,00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 277067,582 ops/s
# Warmup Iteration   2: 302635,952 ops/s
# Warmup Iteration   3: 298309,994 ops/s
# Warmup Iteration   4: 301161,293 ops/s
# Warmup Iteration   5: 296391,542 ops/s
Iteration   1: 303315,537 ops/s
Iteration   2: 299200,025 ops/s
Iteration   3: 303522,159 ops/s
Iteration   4: 296930,393 ops/s
Iteration   5: 298362,717 ops/s

# Run progress: 20,00% complete, ETA 00:06:41
# Fork: 2 of 5
# Warmup Iteration   1: 274274,140 ops/s
# Warmup Iteration   2: 297683,816 ops/s
# Warmup Iteration   3: 298927,471 ops/s
# Warmup Iteration   4: 295315,343 ops/s
# Warmup Iteration   5: 297250,669 ops/s
Iteration   1: 298199,653 ops/s
Iteration   2: 303059,888 ops/s
Iteration   3: 295211,258 ops/s
Iteration   4: 299416,291 ops/s
Iteration   5: 299266,084 ops/s

# Run progress: 40,00% complete, ETA 00:05:01
# Fork: 3 of 5
# Warmup Iteration   1: 271546,134 ops/s
# Warmup Iteration   2: 293286,841 ops/s
# Warmup Iteration   3: 294003,816 ops/s
# Warmup Iteration   4: 294342,756 ops/s
# Warmup Iteration   5: 291969,743 ops/s
Iteration   1: 299612,203 ops/s
Iteration   2: 284889,366 ops/s
Iteration   3: 298522,890 ops/s
Iteration   4: 292338,099 ops/s
Iteration   5: 293326,826 ops/s

# Run progress: 60,00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 265602,787 ops/s
# Warmup Iteration   2: 288161,058 ops/s
# Warmup Iteration   3: 291568,331 ops/s
# Warmup Iteration   4: 299351,499 ops/s
# Warmup Iteration   5: 301149,006 ops/s
Iteration   1: 299783,748 ops/s
Iteration   2: 296761,235 ops/s
Iteration   3: 299822,152 ops/s
Iteration   4: 285665,999 ops/s
Iteration   5: 260386,311 ops/s

# Run progress: 80,00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 268297,739 ops/s
# Warmup Iteration   2: 292802,021 ops/s
# Warmup Iteration   3: 298137,060 ops/s
# Warmup Iteration   4: 292218,942 ops/s
# Warmup Iteration   5: 291757,881 ops/s
Iteration   1: 297679,040 ops/s
Iteration   2: 289148,717 ops/s
Iteration   3: 292332,087 ops/s
Iteration   4: 289253,088 ops/s
Iteration   5: 281604,506 ops/s


Result "jsonvalues.benchmark.mutable.parsing.StringToJsArray_100.java_array_list":
  294304,411 ±(99.9%) 6866,389 ops/s [Average]
  (min, avg, max) = (260386,311, 294304,411, 303522,159), stdev = 9166,432
  CI (99.9%): [287438,022, 301170,799] (assumes normal distribution)


# Run complete. Total time: 00:08:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                             Mode  Cnt       Score      Error  Units
StringToJsArray_100.java_array_list  thrpt   25  294304,411 ± 6866,389  ops/s
