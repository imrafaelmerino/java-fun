# JMH version: 1.21
# VM version: JDK 1.8.0_202, OpenJDK 64-Bit Server VM, 25.202-b05
# VM invoker: /Users/rmerino/.sdkman/candidates/java/8.0.202-zulu/jre/bin/java
# VM options: -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc-log-immutable-scala-hash-map-100.log
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jsonvalues.benchmark.immutable.parsing.StringToJsObj_100.scala_hash_map

# Run progress: 0,00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 178540,639 ops/s
# Warmup Iteration   2: 194328,096 ops/s
# Warmup Iteration   3: 180163,647 ops/s
# Warmup Iteration   4: 196639,201 ops/s
# Warmup Iteration   5: 199209,045 ops/s
Iteration   1: 201069,792 ops/s
Iteration   2: 202108,764 ops/s
Iteration   3: 201969,029 ops/s
Iteration   4: 202058,633 ops/s
Iteration   5: 200587,804 ops/s

# Run progress: 20,00% complete, ETA 00:06:42
# Fork: 2 of 5
# Warmup Iteration   1: 190078,842 ops/s
# Warmup Iteration   2: 206339,190 ops/s
# Warmup Iteration   3: 206699,842 ops/s
# Warmup Iteration   4: 206897,264 ops/s
# Warmup Iteration   5: 206646,807 ops/s
Iteration   1: 204732,757 ops/s
Iteration   2: 206724,766 ops/s
Iteration   3: 206477,588 ops/s
Iteration   4: 206628,541 ops/s
Iteration   5: 206739,427 ops/s

# Run progress: 40,00% complete, ETA 00:05:01
# Fork: 3 of 5
# Warmup Iteration   1: 186559,344 ops/s
# Warmup Iteration   2: 200124,000 ops/s
# Warmup Iteration   3: 202251,852 ops/s
# Warmup Iteration   4: 202052,245 ops/s
# Warmup Iteration   5: 202097,330 ops/s
Iteration   1: 202398,069 ops/s
Iteration   2: 202118,869 ops/s
Iteration   3: 196774,887 ops/s
Iteration   4: 202097,045 ops/s
Iteration   5: 202190,965 ops/s

# Run progress: 60,00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 188033,026 ops/s
# Warmup Iteration   2: 204141,174 ops/s
# Warmup Iteration   3: 204034,624 ops/s
# Warmup Iteration   4: 202417,137 ops/s
# Warmup Iteration   5: 204090,203 ops/s
Iteration   1: 203905,366 ops/s
Iteration   2: 203904,156 ops/s
Iteration   3: 204068,878 ops/s
Iteration   4: 204033,184 ops/s
Iteration   5: 202381,710 ops/s

# Run progress: 80,00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 189975,005 ops/s
# Warmup Iteration   2: 206538,078 ops/s
# Warmup Iteration   3: 206504,470 ops/s
# Warmup Iteration   4: 207036,590 ops/s
# Warmup Iteration   5: 206976,293 ops/s
Iteration   1: 205422,825 ops/s
Iteration   2: 206799,754 ops/s
Iteration   3: 206525,563 ops/s
Iteration   4: 206605,113 ops/s
Iteration   5: 206637,902 ops/s


Result "jsonvalues.benchmark.immutable.parsing.StringToJsObj_100.scala_hash_map":
  203798,455 ±(99.9%) 1916,069 ops/s [Average]
  (min, avg, max) = (196774,887, 203798,455, 206799,754), stdev = 2557,897
  CI (99.9%): [201882,387, 205714,524] (assumes normal distribution)


# Run complete. Total time: 00:08:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          Mode  Cnt       Score      Error  Units
StringToJsObj_100.scala_hash_map  thrpt   25  203798,455 ± 1916,069  ops/s
