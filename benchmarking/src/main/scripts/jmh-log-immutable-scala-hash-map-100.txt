# JMH version: 1.21
# VM version: JDK 1.8.0_202, OpenJDK 64-Bit Server VM, 25.202-b05
# VM invoker: /Users/rmerino/.sdkman/candidates/java/8.0.202-zulu/jre/bin/java
# VM options: -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc-log-immutable-scala-hash-map-100.log
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jsonvalues.benchmark.immutable.parsing.StringToJsObj_100.scala_hash_map

# Run progress: 0,00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 157964,223 ops/s
# Warmup Iteration   2: 173664,854 ops/s
# Warmup Iteration   3: 197626,770 ops/s
# Warmup Iteration   4: 194113,794 ops/s
# Warmup Iteration   5: 181281,190 ops/s
Iteration   1: 167978,194 ops/s
Iteration   2: 198128,275 ops/s
Iteration   3: 194362,285 ops/s
Iteration   4: 198078,335 ops/s
Iteration   5: 198325,396 ops/s

# Run progress: 20,00% complete, ETA 00:06:41
# Fork: 2 of 5
# Warmup Iteration   1: 185763,170 ops/s
# Warmup Iteration   2: 199419,350 ops/s
# Warmup Iteration   3: 199778,026 ops/s
# Warmup Iteration   4: 199861,790 ops/s
# Warmup Iteration   5: 186569,908 ops/s
Iteration   1: 178678,928 ops/s
Iteration   2: 176160,324 ops/s
Iteration   3: 191619,667 ops/s
Iteration   4: 177347,942 ops/s
Iteration   5: 182975,469 ops/s

# Run progress: 40,00% complete, ETA 00:05:01
# Fork: 3 of 5
# Warmup Iteration   1: 183460,287 ops/s
# Warmup Iteration   2: 189994,965 ops/s
# Warmup Iteration   3: 191365,223 ops/s
# Warmup Iteration   4: 195098,216 ops/s
# Warmup Iteration   5: 195731,124 ops/s
Iteration   1: 195460,452 ops/s
Iteration   2: 195325,725 ops/s
Iteration   3: 195704,854 ops/s
Iteration   4: 195985,111 ops/s
Iteration   5: 195485,590 ops/s

# Run progress: 60,00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 186080,332 ops/s
# Warmup Iteration   2: 197921,773 ops/s
# Warmup Iteration   3: 199636,089 ops/s
# Warmup Iteration   4: 199066,655 ops/s
# Warmup Iteration   5: 200619,012 ops/s
Iteration   1: 200149,260 ops/s
Iteration   2: 146501,686 ops/s
Iteration   3: 139604,033 ops/s
Iteration   4: 105214,932 ops/s
Iteration   5: 162237,047 ops/s

# Run progress: 80,00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 170165,649 ops/s
# Warmup Iteration   2: 185450,975 ops/s
# Warmup Iteration   3: 186248,665 ops/s
# Warmup Iteration   4: 186560,846 ops/s
# Warmup Iteration   5: 186467,057 ops/s
Iteration   1: 186331,661 ops/s
Iteration   2: 186538,812 ops/s
Iteration   3: 185720,950 ops/s
Iteration   4: 184830,325 ops/s
Iteration   5: 186252,146 ops/s


Result "jsonvalues.benchmark.immutable.parsing.StringToJsObj_100.scala_hash_map":
  180999,896 ±(99.9%) 16712,649 ops/s [Average]
  (min, avg, max) = (105214,932, 180999,896, 200149,260), stdev = 22310,909
  CI (99.9%): [164287,247, 197712,545] (assumes normal distribution)


# Run complete. Total time: 00:08:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          Mode  Cnt       Score       Error  Units
StringToJsObj_100.scala_hash_map  thrpt   25  180999,896 ± 16712,649  ops/s
