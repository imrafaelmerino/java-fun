# JMH version: 1.21
# VM version: JDK 1.8.0_202, OpenJDK 64-Bit Server VM, 25.202-b05
# VM invoker: /Users/rmerino/.sdkman/candidates/java/8.0.202-zulu/jre/bin/java
# VM options: -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc-log-immutable-clojure_set-100.log
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jsonvalues.benchmark.immutable.parsing.StringToJsArray_100.clojure_set

# Run progress: 0,00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 13150,531 ops/s
# Warmup Iteration   2: 61399,365 ops/s
# Warmup Iteration   3: 61695,070 ops/s
# Warmup Iteration   4: 61976,934 ops/s
# Warmup Iteration   5: 62448,693 ops/s
Iteration   1: 61497,135 ops/s
Iteration   2: 61647,077 ops/s
Iteration   3: 61929,134 ops/s
Iteration   4: 61481,562 ops/s
Iteration   5: 58754,072 ops/s

# Run progress: 20,00% complete, ETA 00:06:41
# Fork: 2 of 5
# Warmup Iteration   1: 10413,088 ops/s
# Warmup Iteration   2: 59502,684 ops/s
# Warmup Iteration   3: 60714,652 ops/s
# Warmup Iteration   4: 58876,535 ops/s
# Warmup Iteration   5: 61737,385 ops/s
Iteration   1: 62620,511 ops/s
Iteration   2: 61291,883 ops/s
Iteration   3: 63190,696 ops/s
Iteration   4: 63870,328 ops/s
Iteration   5: 63845,774 ops/s

# Run progress: 40,00% complete, ETA 00:05:01
# Fork: 3 of 5
# Warmup Iteration   1: 17928,979 ops/s
# Warmup Iteration   2: 63526,561 ops/s
# Warmup Iteration   3: 61713,026 ops/s
# Warmup Iteration   4: 61555,364 ops/s
# Warmup Iteration   5: 61976,335 ops/s
Iteration   1: 47199,222 ops/s
Iteration   2: 55002,099 ops/s
Iteration   3: 62892,849 ops/s
Iteration   4: 58204,786 ops/s
Iteration   5: 59976,261 ops/s

# Run progress: 60,00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 19140,573 ops/s
# Warmup Iteration   2: 63399,923 ops/s
# Warmup Iteration   3: 62939,905 ops/s
# Warmup Iteration   4: 63522,744 ops/s
# Warmup Iteration   5: 64653,027 ops/s
Iteration   1: 62475,508 ops/s
Iteration   2: 62998,919 ops/s
Iteration   3: 64949,477 ops/s
Iteration   4: 65042,496 ops/s
Iteration   5: 64318,129 ops/s

# Run progress: 80,00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 20467,604 ops/s
# Warmup Iteration   2: 65351,169 ops/s
# Warmup Iteration   3: 64559,046 ops/s
# Warmup Iteration   4: 67729,679 ops/s
# Warmup Iteration   5: 66890,699 ops/s
Iteration   1: 67759,486 ops/s
Iteration   2: 66552,612 ops/s
Iteration   3: 68103,832 ops/s
Iteration   4: 67347,228 ops/s
Iteration   5: 68098,739 ops/s


Result "jsonvalues.benchmark.immutable.parsing.StringToJsArray_100.clojure_set":
  62441,993 ±(99.9%) 3365,092 ops/s [Average]
  (min, avg, max) = (47199,222, 62441,993, 68103,832), stdev = 4492,302
  CI (99.9%): [59076,900, 65807,085] (assumes normal distribution)


# Run complete. Total time: 00:08:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                         Mode  Cnt      Score      Error  Units
StringToJsArray_100.clojure_set  thrpt   25  62441,993 ± 3365,092  ops/s
