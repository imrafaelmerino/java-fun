# JMH version: 1.21
# VM version: JDK 1.8.0_202, OpenJDK 64-Bit Server VM, 25.202-b05
# VM invoker: /Users/rmerino/.sdkman/candidates/java/8.0.202-zulu/jre/bin/java
# VM options: -Xms256m -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc-log-mutable-jackson-array-100.log
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jsonvalues.benchmark.mutable.parsing.StringToJsArray_100.jackson

# Run progress: 0,00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 314774,127 ops/s
# Warmup Iteration   2: 336990,199 ops/s
# Warmup Iteration   3: 338239,073 ops/s
# Warmup Iteration   4: 227176,833 ops/s
# Warmup Iteration   5: 319486,534 ops/s
Iteration   1: 323608,387 ops/s
Iteration   2: 336756,863 ops/s
Iteration   3: 332235,544 ops/s
Iteration   4: 334304,039 ops/s
Iteration   5: 333261,615 ops/s

# Run progress: 20,00% complete, ETA 00:06:41
# Fork: 2 of 5
# Warmup Iteration   1: 312475,999 ops/s
# Warmup Iteration   2: 323513,016 ops/s
# Warmup Iteration   3: 342052,029 ops/s
# Warmup Iteration   4: 342214,774 ops/s
# Warmup Iteration   5: 342435,417 ops/s
Iteration   1: 335908,579 ops/s
Iteration   2: 338714,112 ops/s
Iteration   3: 337094,767 ops/s
Iteration   4: 344267,508 ops/s
Iteration   5: 343709,985 ops/s

# Run progress: 40,00% complete, ETA 00:05:01
# Fork: 3 of 5
# Warmup Iteration   1: 318899,827 ops/s
# Warmup Iteration   2: 341070,818 ops/s
# Warmup Iteration   3: 334723,679 ops/s
# Warmup Iteration   4: 334966,802 ops/s
# Warmup Iteration   5: 343247,330 ops/s
Iteration   1: 340644,589 ops/s
Iteration   2: 338590,591 ops/s
Iteration   3: 337578,723 ops/s
Iteration   4: 343327,388 ops/s
Iteration   5: 335164,201 ops/s

# Run progress: 60,00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 316058,857 ops/s
# Warmup Iteration   2: 339952,942 ops/s
# Warmup Iteration   3: 340769,695 ops/s
# Warmup Iteration   4: 339765,726 ops/s
# Warmup Iteration   5: 324325,209 ops/s
Iteration   1: 340008,370 ops/s
Iteration   2: 340365,031 ops/s
Iteration   3: 340471,784 ops/s
Iteration   4: 338173,254 ops/s
Iteration   5: 340987,709 ops/s

# Run progress: 80,00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 324823,339 ops/s
# Warmup Iteration   2: 348750,613 ops/s
# Warmup Iteration   3: 350204,923 ops/s
# Warmup Iteration   4: 353745,554 ops/s
# Warmup Iteration   5: 346123,393 ops/s
Iteration   1: 358741,257 ops/s
Iteration   2: 351291,381 ops/s
Iteration   3: 354589,991 ops/s
Iteration   4: 353134,916 ops/s
Iteration   5: 359248,018 ops/s


Result "jsonvalues.benchmark.mutable.parsing.StringToJsArray_100.jackson":
  341287,144 ±(99.9%) 6335,390 ops/s [Average]
  (min, avg, max) = (323608,387, 341287,144, 359248,018), stdev = 8457,565
  CI (99.9%): [334951,754, 347622,535] (assumes normal distribution)


# Run complete. Total time: 00:08:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                     Mode  Cnt       Score      Error  Units
StringToJsArray_100.jackson  thrpt   25  341287,144 ± 6335,390  ops/s
