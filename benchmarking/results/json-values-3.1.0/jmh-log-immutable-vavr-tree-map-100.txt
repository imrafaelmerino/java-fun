# JMH version: 1.21
# VM version: JDK 1.8.0_202, OpenJDK 64-Bit Server VM, 25.202-b05
# VM invoker: /Users/rmerino/.sdkman/candidates/java/8.0.202-zulu/jre/bin/java
# VM options: -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc-log-immutable-vavr_tree_map-100.log
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jsonvalues.benchmark.immutable.parsing.StringToJsObj_100.vavr_tree_map

# Run progress: 0,00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 112856,508 ops/s
# Warmup Iteration   2: 120999,907 ops/s
# Warmup Iteration   3: 121082,686 ops/s
# Warmup Iteration   4: 121020,861 ops/s
# Warmup Iteration   5: 121017,545 ops/s
Iteration   1: 121001,497 ops/s
Iteration   2: 120959,388 ops/s
Iteration   3: 121085,739 ops/s
Iteration   4: 121001,395 ops/s
Iteration   5: 121110,409 ops/s

# Run progress: 20,00% complete, ETA 00:06:41
# Fork: 2 of 5
# Warmup Iteration   1: 112244,783 ops/s
# Warmup Iteration   2: 119911,148 ops/s
# Warmup Iteration   3: 120320,910 ops/s
# Warmup Iteration   4: 120161,174 ops/s
# Warmup Iteration   5: 119987,480 ops/s
Iteration   1: 120081,984 ops/s
Iteration   2: 120262,147 ops/s
Iteration   3: 120019,529 ops/s
Iteration   4: 119981,193 ops/s
Iteration   5: 120048,346 ops/s

# Run progress: 40,00% complete, ETA 00:05:01
# Fork: 3 of 5
# Warmup Iteration   1: 113876,624 ops/s
# Warmup Iteration   2: 121930,934 ops/s
# Warmup Iteration   3: 121926,321 ops/s
# Warmup Iteration   4: 121979,387 ops/s
# Warmup Iteration   5: 122226,838 ops/s
Iteration   1: 122012,299 ops/s
Iteration   2: 121913,578 ops/s
Iteration   3: 121905,438 ops/s
Iteration   4: 122176,303 ops/s
Iteration   5: 122058,751 ops/s

# Run progress: 60,00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 108328,669 ops/s
# Warmup Iteration   2: 115480,058 ops/s
# Warmup Iteration   3: 115359,948 ops/s
# Warmup Iteration   4: 115645,615 ops/s
# Warmup Iteration   5: 115656,981 ops/s
Iteration   1: 115607,916 ops/s
Iteration   2: 115579,967 ops/s
Iteration   3: 115683,589 ops/s
Iteration   4: 115641,913 ops/s
Iteration   5: 115623,074 ops/s

# Run progress: 80,00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 111318,368 ops/s
# Warmup Iteration   2: 119114,723 ops/s
# Warmup Iteration   3: 119352,649 ops/s
# Warmup Iteration   4: 119262,735 ops/s
# Warmup Iteration   5: 119219,590 ops/s
Iteration   1: 119428,995 ops/s
Iteration   2: 119315,031 ops/s
Iteration   3: 119250,699 ops/s
Iteration   4: 119242,791 ops/s
Iteration   5: 119396,976 ops/s


Result "jsonvalues.benchmark.immutable.parsing.StringToJsObj_100.vavr_tree_map":
  119615,558 ±(99.9%) 1674,580 ops/s [Average]
  (min, avg, max) = (115579,967, 119615,558, 122176,303), stdev = 2235,517
  CI (99.9%): [117940,978, 121290,138] (assumes normal distribution)


# Run complete. Total time: 00:08:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                         Mode  Cnt       Score      Error  Units
StringToJsObj_100.vavr_tree_map  thrpt   25  119615,558 ± 1674,580  ops/s
