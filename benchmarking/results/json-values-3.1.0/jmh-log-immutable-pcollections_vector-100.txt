# JMH version: 1.21
# VM version: JDK 1.8.0_202, OpenJDK 64-Bit Server VM, 25.202-b05
# VM invoker: /Users/rmerino/.sdkman/candidates/java/8.0.202-zulu/jre/bin/java
# VM options: -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc-log-immutable-pcollections_vector-100.log
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jsonvalues.benchmark.immutable.parsing.StringToJsArray_100.pcollections_vector

# Run progress: 0,00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 65500,993 ops/s
# Warmup Iteration   2: 70249,905 ops/s
# Warmup Iteration   3: 61758,789 ops/s
# Warmup Iteration   4: 71316,541 ops/s
# Warmup Iteration   5: 66088,651 ops/s
Iteration   1: 70826,420 ops/s
Iteration   2: 62345,941 ops/s
Iteration   3: 55039,417 ops/s
Iteration   4: 67253,686 ops/s
Iteration   5: 71651,055 ops/s

# Run progress: 20,00% complete, ETA 00:06:41
# Fork: 2 of 5
# Warmup Iteration   1: 65465,541 ops/s
# Warmup Iteration   2: 66593,704 ops/s
# Warmup Iteration   3: 71495,081 ops/s
# Warmup Iteration   4: 67273,491 ops/s
# Warmup Iteration   5: 67766,885 ops/s
Iteration   1: 69823,843 ops/s
Iteration   2: 64297,640 ops/s
Iteration   3: 71960,652 ops/s
Iteration   4: 61083,842 ops/s
Iteration   5: 68296,263 ops/s

# Run progress: 40,00% complete, ETA 00:05:01
# Fork: 3 of 5
# Warmup Iteration   1: 65315,405 ops/s
# Warmup Iteration   2: 61344,042 ops/s
# Warmup Iteration   3: 60309,490 ops/s
# Warmup Iteration   4: 67651,059 ops/s
# Warmup Iteration   5: 59579,570 ops/s
Iteration   1: 64770,074 ops/s
Iteration   2: 67687,614 ops/s
Iteration   3: 67922,073 ops/s
Iteration   4: 66083,203 ops/s
Iteration   5: 68416,006 ops/s

# Run progress: 60,00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 63362,414 ops/s
# Warmup Iteration   2: 63013,987 ops/s
# Warmup Iteration   3: 63910,578 ops/s
# Warmup Iteration   4: 69278,390 ops/s
# Warmup Iteration   5: 65330,645 ops/s
Iteration   1: 66624,548 ops/s
Iteration   2: 66507,557 ops/s
Iteration   3: 73353,654 ops/s
Iteration   4: 71162,610 ops/s
Iteration   5: 61763,528 ops/s

# Run progress: 80,00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 55807,872 ops/s
# Warmup Iteration   2: 63697,899 ops/s
# Warmup Iteration   3: 55172,568 ops/s
# Warmup Iteration   4: 63666,606 ops/s
# Warmup Iteration   5: 65651,157 ops/s
Iteration   1: 64042,225 ops/s
Iteration   2: 59380,151 ops/s
Iteration   3: 72265,611 ops/s
Iteration   4: 49127,378 ops/s
Iteration   5: 39187,183 ops/s


Result "jsonvalues.benchmark.immutable.parsing.StringToJsArray_100.pcollections_vector":
  64834,887 ±(99.9%) 5807,561 ops/s [Average]
  (min, avg, max) = (39187,183, 64834,887, 73353,654), stdev = 7752,928
  CI (99.9%): [59027,326, 70642,448] (assumes normal distribution)


# Run complete. Total time: 00:08:22

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                 Mode  Cnt      Score      Error  Units
StringToJsArray_100.pcollections_vector  thrpt   25  64834,887 ± 5807,561  ops/s
