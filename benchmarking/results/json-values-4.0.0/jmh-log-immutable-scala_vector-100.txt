# JMH version: 1.21
# VM version: JDK 1.8.0_202, OpenJDK 64-Bit Server VM, 25.202-b05
# VM invoker: /Users/rmerino/.sdkman/candidates/java/8.0.202-zulu/jre/bin/java
# VM options: -Xms256m -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc-log-immutable-scala_vector-100.log
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jsonvalues.benchmark.immutable.parsing.StringToJsArray_100.scala_vector

# Run progress: 0,00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 156175,187 ops/s
# Warmup Iteration   2: 204145,192 ops/s
# Warmup Iteration   3: 211574,044 ops/s
# Warmup Iteration   4: 213367,114 ops/s
# Warmup Iteration   5: 212924,691 ops/s
Iteration   1: 210558,867 ops/s
Iteration   2: 208130,903 ops/s
Iteration   3: 194817,275 ops/s
Iteration   4: 199230,055 ops/s
Iteration   5: 173815,519 ops/s

# Run progress: 20,00% complete, ETA 00:06:42
# Fork: 2 of 5
# Warmup Iteration   1: 182253,485 ops/s
# Warmup Iteration   2: 207895,500 ops/s
# Warmup Iteration   3: 198510,482 ops/s
# Warmup Iteration   4: 197892,735 ops/s
# Warmup Iteration   5: 163330,232 ops/s
Iteration   1: 179504,405 ops/s
Iteration   2: 180513,522 ops/s
Iteration   3: 160617,401 ops/s
Iteration   4: 194031,654 ops/s
Iteration   5: 193220,100 ops/s

# Run progress: 40,00% complete, ETA 00:05:01
# Fork: 3 of 5
# Warmup Iteration   1: 158756,224 ops/s
# Warmup Iteration   2: 170848,309 ops/s
# Warmup Iteration   3: 176497,415 ops/s
# Warmup Iteration   4: 170701,069 ops/s
# Warmup Iteration   5: 179326,211 ops/s
Iteration   1: 190346,240 ops/s
Iteration   2: 175669,219 ops/s
Iteration   3: 170167,038 ops/s
Iteration   4: 174981,826 ops/s
Iteration   5: 200524,947 ops/s

# Run progress: 60,00% complete, ETA 00:03:21
# Fork: 4 of 5
# Warmup Iteration   1: 167624,044 ops/s
# Warmup Iteration   2: 162070,159 ops/s
# Warmup Iteration   3: 186365,207 ops/s
# Warmup Iteration   4: 199695,216 ops/s
# Warmup Iteration   5: 134401,104 ops/s
Iteration   1: 187948,707 ops/s
Iteration   2: 204130,624 ops/s
Iteration   3: 179441,368 ops/s
Iteration   4: 164962,693 ops/s
Iteration   5: 151827,445 ops/s

# Run progress: 80,00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 175609,335 ops/s
# Warmup Iteration   2: 193418,304 ops/s
# Warmup Iteration   3: 203110,235 ops/s
# Warmup Iteration   4: 198755,233 ops/s
# Warmup Iteration   5: 202915,780 ops/s
Iteration   1: 202454,307 ops/s
Iteration   2: 203177,470 ops/s
Iteration   3: 203037,086 ops/s
Iteration   4: 204123,679 ops/s
Iteration   5: 200201,869 ops/s


Result "jsonvalues.benchmark.immutable.parsing.StringToJsArray_100.scala_vector":
  188297,369 ±(99.9%) 12113,517 ops/s [Average]
  (min, avg, max) = (151827,445, 188297,369, 210558,867), stdev = 16171,199
  CI (99.9%): [176183,851, 200410,886] (assumes normal distribution)


# Run complete. Total time: 00:08:22

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          Mode  Cnt       Score       Error  Units
StringToJsArray_100.scala_vector  thrpt   25  188297,369 ± 12113,517  ops/s
