# JMH version: 1.21
# VM version: JDK 1.8.0_202, OpenJDK 64-Bit Server VM, 25.202-b05
# VM invoker: /Users/rmerino/.sdkman/candidates/java/8.0.202-zulu/jre/bin/java
# VM options: -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc-log-mutable-java_array_list-100.log
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jsonvalues.benchmark.mutable.parsing.StringToJsArray_100.java_array_list

# Run progress: 0,00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 73460,827 ops/s
# Warmup Iteration   2: 75902,738 ops/s
# Warmup Iteration   3: 71899,752 ops/s
# Warmup Iteration   4: 81388,595 ops/s
# Warmup Iteration   5: 90092,280 ops/s
Iteration   1: 86505,945 ops/s
Iteration   2: 96833,998 ops/s
Iteration   3: 84521,456 ops/s
Iteration   4: 92021,156 ops/s
Iteration   5: 96148,369 ops/s

# Run progress: 20,00% complete, ETA 00:06:41
# Fork: 2 of 5
# Warmup Iteration   1: 87136,994 ops/s
# Warmup Iteration   2: 90480,689 ops/s
# Warmup Iteration   3: 84535,286 ops/s
# Warmup Iteration   4: 70690,920 ops/s
# Warmup Iteration   5: 83044,348 ops/s
Iteration   1: 91008,002 ops/s
Iteration   2: 92520,239 ops/s
Iteration   3: 97187,139 ops/s
Iteration   4: 96506,011 ops/s
Iteration   5: 96801,510 ops/s

# Run progress: 40,00% complete, ETA 00:05:01
# Fork: 3 of 5
# Warmup Iteration   1: 86595,721 ops/s
# Warmup Iteration   2: 94512,272 ops/s
# Warmup Iteration   3: 94511,610 ops/s
# Warmup Iteration   4: 94707,666 ops/s
# Warmup Iteration   5: 94459,395 ops/s
Iteration   1: 95140,110 ops/s
Iteration   2: 94534,334 ops/s
Iteration   3: 81088,475 ops/s
Iteration   4: 94045,737 ops/s
Iteration   5: 80023,203 ops/s

# Run progress: 60,00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 76588,316 ops/s
# Warmup Iteration   2: 76808,410 ops/s
# Warmup Iteration   3: 76624,017 ops/s
# Warmup Iteration   4: 91335,184 ops/s
# Warmup Iteration   5: 92691,524 ops/s
Iteration   1: 95436,009 ops/s
Iteration   2: 91002,380 ops/s
Iteration   3: 96482,338 ops/s
Iteration   4: 96406,896 ops/s
Iteration   5: 94915,384 ops/s

# Run progress: 80,00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 93858,918 ops/s
# Warmup Iteration   2: 99494,494 ops/s
# Warmup Iteration   3: 97797,142 ops/s
# Warmup Iteration   4: 97013,699 ops/s
# Warmup Iteration   5: 96693,255 ops/s
Iteration   1: 97814,939 ops/s
Iteration   2: 98453,316 ops/s
Iteration   3: 97934,487 ops/s
Iteration   4: 99965,643 ops/s
Iteration   5: 94317,520 ops/s


Result "jsonvalues.benchmark.mutable.parsing.StringToJsArray_100.java_array_list":
  93504,584 ±(99.9%) 3942,766 ops/s [Average]
  (min, avg, max) = (80023,203, 93504,584, 99965,643), stdev = 5263,479
  CI (99.9%): [89561,818, 97447,349] (assumes normal distribution)


# Run complete. Total time: 00:08:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                             Mode  Cnt      Score      Error  Units
StringToJsArray_100.java_array_list  thrpt   25  93504,584 ± 3942,766  ops/s
