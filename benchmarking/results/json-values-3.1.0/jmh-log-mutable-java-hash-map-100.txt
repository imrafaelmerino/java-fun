::q!# JMH version: 1.21
# VM version: JDK 1.8.0_202, OpenJDK 64-Bit Server VM, 25.202-b05
# VM invoker: /Users/rmerino/.sdkman/candidates/java/8.0.202-zulu/jre/bin/java
# VM options: -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc-log-mutable-java_hash_map-100.log
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jsonvalues.benchmark.mutable.parsing.StringToJsObj_100.java_hash_map

# Run progress: 0,00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 156785,195 ops/s
# Warmup Iteration   2: 166086,032 ops/s
# Warmup Iteration   3: 166133,940 ops/s
# Warmup Iteration   4: 166247,751 ops/s
# Warmup Iteration   5: 166056,704 ops/s
Iteration   1: 166176,860 ops/s
Iteration   2: 165916,050 ops/s
Iteration   3: 165512,530 ops/s
Iteration   4: 165762,476 ops/s
Iteration   5: 165947,393 ops/s

# Run progress: 20,00% complete, ETA 00:06:41
# Fork: 2 of 5
# Warmup Iteration   1: 146013,566 ops/s
# Warmup Iteration   2: 152753,952 ops/s
# Warmup Iteration   3: 153310,836 ops/s
# Warmup Iteration   4: 153127,664 ops/s
# Warmup Iteration   5: 153234,817 ops/s
Iteration   1: 153214,812 ops/s
Iteration   2: 152906,844 ops/s
Iteration   3: 152775,377 ops/s
Iteration   4: 152885,641 ops/s
Iteration   5: 152850,516 ops/s

# Run progress: 40,00% complete, ETA 00:05:01
# Fork: 3 of 5
# Warmup Iteration   1: 150928,852 ops/s
# Warmup Iteration   2: 160420,892 ops/s
# Warmup Iteration   3: 160583,476 ops/s
# Warmup Iteration   4: 160621,887 ops/s
# Warmup Iteration   5: 160496,174 ops/s
Iteration   1: 160523,342 ops/s
Iteration   2: 160260,218 ops/s
Iteration   3: 160180,239 ops/s
Iteration   4: 160303,185 ops/s
Iteration   5: 160387,883 ops/s

# Run progress: 60,00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 152988,063 ops/s
# Warmup Iteration   2: 161982,392 ops/s
# Warmup Iteration   3: 162177,221 ops/s
# Warmup Iteration   4: 161971,359 ops/s
# Warmup Iteration   5: 161185,376 ops/s
Iteration   1: 162019,663 ops/s
Iteration   2: 161727,056 ops/s
Iteration   3: 161564,672 ops/s
Iteration   4: 161672,882 ops/s
Iteration   5: 161809,751 ops/s

# Run progress: 80,00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 147911,332 ops/s
# Warmup Iteration   2: 154659,150 ops/s
# Warmup Iteration   3: 155381,331 ops/s
# Warmup Iteration   4: 154982,215 ops/s
# Warmup Iteration   5: 155436,011 ops/s
Iteration   1: 155317,008 ops/s
Iteration   2: 155023,563 ops/s
Iteration   3: 155114,603 ops/s
Iteration   4: 154903,148 ops/s
Iteration   5: 155088,768 ops/s


Result "jsonvalues.benchmark.mutable.parsing.StringToJsObj_100.java_hash_map":
  159193,779 ±(99.9%) 3563,072 ops/s [Average]
  (min, avg, max) = (152775,377, 159193,779, 166176,860), stdev = 4756,600
  CI (99.9%): [155630,707, 162756,852] (assumes normal distribution)


# Run complete. Total time: 00:08:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                         Mode  Cnt       Score      Error  Units
StringToJsObj_100.java_hash_map  thrpt   25  159193,779 ± 3563,072  ops/s
