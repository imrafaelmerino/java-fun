# JMH version: 1.21
# VM version: JDK 1.8.0_202, OpenJDK 64-Bit Server VM, 25.202-b05
# VM invoker: /Users/rmerino/.sdkman/candidates/java/8.0.202-zulu/jre/bin/java
# VM options: -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc-log-immutable-vavr_list-100.log
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jsonvalues.benchmark.immutable.parsing.StringToJsArray_100.vavr_list

# Run progress: 0,00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 16514,114 ops/s
# Warmup Iteration   2: 16007,813 ops/s
# Warmup Iteration   3: 15534,829 ops/s
# Warmup Iteration   4: 15686,348 ops/s
# Warmup Iteration   5: 18600,834 ops/s
Iteration   1: 19050,583 ops/s
Iteration   2: 17556,285 ops/s
Iteration   3: 21075,550 ops/s
Iteration   4: 21113,304 ops/s
Iteration   5: 21056,274 ops/s

# Run progress: 20,00% complete, ETA 00:06:41
# Fork: 2 of 5
# Warmup Iteration   1: 19432,764 ops/s
# Warmup Iteration   2: 21089,933 ops/s
# Warmup Iteration   3: 21004,198 ops/s
# Warmup Iteration   4: 21112,584 ops/s
# Warmup Iteration   5: 20989,392 ops/s
Iteration   1: 20974,104 ops/s
Iteration   2: 20389,422 ops/s
Iteration   3: 14032,768 ops/s
Iteration   4: 17927,827 ops/s
Iteration   5: 19061,117 ops/s

# Run progress: 40,00% complete, ETA 00:05:01
# Fork: 3 of 5
# Warmup Iteration   1: 17022,005 ops/s
# Warmup Iteration   2: 20874,665 ops/s
# Warmup Iteration   3: 21420,003 ops/s
# Warmup Iteration   4: 19266,694 ops/s
# Warmup Iteration   5: 19507,554 ops/s
Iteration   1: 19072,333 ops/s
Iteration   2: 20792,168 ops/s
Iteration   3: 15026,881 ops/s
Iteration   4: 15809,246 ops/s
Iteration   5: 17417,900 ops/s

# Run progress: 60,00% complete, ETA 00:03:21
# Fork: 4 of 5
# Warmup Iteration   1: 16607,736 ops/s
# Warmup Iteration   2: 20562,089 ops/s
# Warmup Iteration   3: 19980,752 ops/s
# Warmup Iteration   4: 15917,195 ops/s
# Warmup Iteration   5: 15399,733 ops/s
Iteration   1: 15840,990 ops/s
Iteration   2: 17002,026 ops/s
Iteration   3: 18473,522 ops/s
Iteration   4: 17451,013 ops/s
Iteration   5: 20269,644 ops/s

# Run progress: 80,00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 19445,165 ops/s
# Warmup Iteration   2: 21533,009 ops/s
# Warmup Iteration   3: 18812,391 ops/s
# Warmup Iteration   4: 20375,320 ops/s
# Warmup Iteration   5: 21252,862 ops/s
Iteration   1: 21256,531 ops/s
Iteration   2: 20054,442 ops/s
Iteration   3: 18920,028 ops/s
Iteration   4: 20749,618 ops/s
Iteration   5: 17900,365 ops/s


Result "jsonvalues.benchmark.immutable.parsing.StringToJsArray_100.vavr_list":
  18730,958 ±(99.9%) 1569,502 ops/s [Average]
  (min, avg, max) = (14032,768, 18730,958, 21256,531), stdev = 2095,241
  CI (99.9%): [17161,455, 20300,460] (assumes normal distribution)


# Run complete. Total time: 00:08:22

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt      Score      Error  Units
StringToJsArray_100.vavr_list  thrpt   25  18730,958 ± 1569,502  ops/s
