//# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b18
# VM invoker: /Users/imrafaelmerino/.sdkman/candidates/java/8.0.232-zulu/jre/bin/java
# VM options: -Xms256m -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc-log-jackson-object-50.log
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jsonvalues.benchmark.mutable.parsing.StringToJsObj_100.jackson

# Run progress: 0.00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 33619.851 ops/s
# Warmup Iteration   2: 42015.698 ops/s
# Warmup Iteration   3: 41624.528 ops/s
# Warmup Iteration   4: 41968.927 ops/s
# Warmup Iteration   5: 39186.760 ops/s
Iteration   1: 35050.715 ops/s
Iteration   2: 41030.793 ops/s
Iteration   3: 39375.570 ops/s
Iteration   4: 40552.013 ops/s
Iteration   5: 41171.733 ops/s

# Run progress: 20.00% complete, ETA 00:06:45
# Fork: 2 of 5
# Warmup Iteration   1: 36991.213 ops/s
# Warmup Iteration   2: 39454.431 ops/s
# Warmup Iteration   3: 39380.603 ops/s
# Warmup Iteration   4: 38847.659 ops/s
# Warmup Iteration   5: 40315.500 ops/s
Iteration   1: 41921.215 ops/s
Iteration   2: 42062.543 ops/s
Iteration   3: 41938.017 ops/s
Iteration   4: 42088.965 ops/s
Iteration   5: 42115.978 ops/s

# Run progress: 40.00% complete, ETA 00:05:03
# Fork: 3 of 5
# Warmup Iteration   1: 37038.973 ops/s
# Warmup Iteration   2: 41130.656 ops/s
# Warmup Iteration   3: 42112.527 ops/s
# Warmup Iteration   4: 40283.820 ops/s
# Warmup Iteration   5: 40444.206 ops/s
Iteration   1: 40359.377 ops/s
Iteration   2: 41612.751 ops/s
Iteration   3: 41694.450 ops/s
Iteration   4: 40946.906 ops/s
Iteration   5: 40678.374 ops/s

# Run progress: 60.00% complete, ETA 00:03:21
# Fork: 4 of 5
# Warmup Iteration   1: 37159.974 ops/s
# Warmup Iteration   2: 41878.680 ops/s
# Warmup Iteration   3: 41939.981 ops/s
# Warmup Iteration   4: 42617.166 ops/s
# Warmup Iteration   5: 43296.898 ops/s
Iteration   1: 42256.272 ops/s
Iteration   2: 40537.085 ops/s
Iteration   3: 42711.993 ops/s
Iteration   4: 42959.328 ops/s
Iteration   5: 42698.408 ops/s

# Run progress: 80.00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 35187.497 ops/s
# Warmup Iteration   2: 38735.090 ops/s
# Warmup Iteration   3: 41867.283 ops/s
# Warmup Iteration   4: 40876.290 ops/s
# Warmup Iteration   5: 41990.998 ops/s
Iteration   1: 42542.511 ops/s
Iteration   2: 42574.708 ops/s
Iteration   3: 41905.283 ops/s
Iteration   4: 41959.530 ops/s
Iteration   5: 41609.717 ops/s


Result "jsonvalues.benchmark.mutable.parsing.StringToJsObj_100.jackson":
  41374.169 ±(99.9%) 1182.868 ops/s [Average]
  (min, avg, max) = (35050.715, 41374.169, 42959.328), stdev = 1579.095
  CI (99.9%): [40191.301, 42557.038] (assumes normal distribution)


# Run complete. Total time: 00:08:23

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                   Mode  Cnt      Score      Error  Units
StringToJsObj_100.jackson  thrpt   25  41374.169 ± 1182.868  ops/s

Benchmark result is saved to jmh-result.json
