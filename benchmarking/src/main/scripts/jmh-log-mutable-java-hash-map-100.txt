# JMH version: 1.21
# VM version: JDK 1.8.0_202, OpenJDK 64-Bit Server VM, 25.202-b05
# VM invoker: /Users/rmerino/.sdkman/candidates/java/8.0.202-zulu/jre/bin/java
# VM options: -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc-log-mutable-java_hash_map-100.log
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jsonvalues.benchmark.mutable.parsing.StringToJsObj_100.java_hash_map

# Run progress: 0,00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 229059,151 ops/s
# Warmup Iteration   2: 256160,442 ops/s
# Warmup Iteration   3: 258821,555 ops/s
# Warmup Iteration   4: 265861,909 ops/s
# Warmup Iteration   5: 251634,518 ops/s
Iteration   1: 261423,451 ops/s
Iteration   2: 265006,835 ops/s
Iteration   3: 259515,673 ops/s
Iteration   4: 261060,261 ops/s
Iteration   5: 265033,520 ops/s

# Run progress: 20,00% complete, ETA 00:06:41
# Fork: 2 of 5
# Warmup Iteration   1: 252114,077 ops/s
# Warmup Iteration   2: 260585,111 ops/s
# Warmup Iteration   3: 213820,849 ops/s
# Warmup Iteration   4: 241210,140 ops/s
# Warmup Iteration   5: 249379,482 ops/s
Iteration   1: 270188,223 ops/s
Iteration   2: 274372,088 ops/s
Iteration   3: 274796,245 ops/s
Iteration   4: 275508,666 ops/s
Iteration   5: 275103,375 ops/s

# Run progress: 40,00% complete, ETA 00:05:01
# Fork: 3 of 5
# Warmup Iteration   1: 249765,917 ops/s
# Warmup Iteration   2: 264112,252 ops/s
# Warmup Iteration   3: 264178,277 ops/s
# Warmup Iteration   4: 261978,623 ops/s
# Warmup Iteration   5: 255862,890 ops/s
Iteration   1: 263173,399 ops/s
Iteration   2: 263571,169 ops/s
Iteration   3: 263761,250 ops/s
Iteration   4: 245814,672 ops/s
Iteration   5: 232972,531 ops/s

# Run progress: 60,00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 240520,973 ops/s
# Warmup Iteration   2: 261923,182 ops/s
# Warmup Iteration   3: 270951,902 ops/s
# Warmup Iteration   4: 278220,198 ops/s
# Warmup Iteration   5: 275049,648 ops/s
Iteration   1: 264644,565 ops/s
Iteration   2: 281075,854 ops/s
Iteration   3: 275356,291 ops/s
Iteration   4: 280183,362 ops/s
Iteration   5: 282407,781 ops/s

# Run progress: 80,00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 248701,829 ops/s
# Warmup Iteration   2: 228086,078 ops/s
# Warmup Iteration   3: 173515,684 ops/s
# Warmup Iteration   4: 239574,380 ops/s
# Warmup Iteration   5: 236471,172 ops/s
Iteration   1: 213093,895 ops/s
Iteration   2: 223922,244 ops/s
Iteration   3: 209815,870 ops/s
Iteration   4: 239126,893 ops/s
Iteration   5: 251182,301 ops/s


Result "jsonvalues.benchmark.mutable.parsing.StringToJsObj_100.java_hash_map":
  258884,417 ±(99.9%) 15392,631 ops/s [Average]
  (min, avg, max) = (209815,870, 258884,417, 282407,781), stdev = 20548,722
  CI (99.9%): [243491,785, 274277,048] (assumes normal distribution)


# Run complete. Total time: 00:08:22

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                         Mode  Cnt       Score       Error  Units
StringToJsObj_100.java_hash_map  thrpt   25  258884,417 ± 15392,631  ops/s
