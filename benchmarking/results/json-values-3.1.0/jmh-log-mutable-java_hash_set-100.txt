# JMH version: 1.21
# VM version: JDK 1.8.0_202, OpenJDK 64-Bit Server VM, 25.202-b05
# VM invoker: /Users/rmerino/.sdkman/candidates/java/8.0.202-zulu/jre/bin/java
# VM options: -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc-log-mutable-java_hash_set-100.log
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jsonvalues.benchmark.mutable.parsing.StringToJsArray_100.java_hash_set

# Run progress: 0,00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 112166,089 ops/s
# Warmup Iteration   2: 126009,305 ops/s
# Warmup Iteration   3: 119972,217 ops/s
# Warmup Iteration   4: 121167,972 ops/s
# Warmup Iteration   5: 120757,481 ops/s
Iteration   1: 120906,497 ops/s
Iteration   2: 119296,963 ops/s
Iteration   3: 101124,958 ops/s
Iteration   4: 112191,315 ops/s
Iteration   5: 122016,912 ops/s

# Run progress: 20,00% complete, ETA 00:06:41
# Fork: 2 of 5
# Warmup Iteration   1: 74727,422 ops/s
# Warmup Iteration   2: 86251,962 ops/s
# Warmup Iteration   3: 81872,083 ops/s
# Warmup Iteration   4: 82609,023 ops/s
# Warmup Iteration   5: 86874,522 ops/s
Iteration   1: 85952,617 ops/s
Iteration   2: 82968,121 ops/s
Iteration   3: 85762,161 ops/s
Iteration   4: 81025,855 ops/s
Iteration   5: 81533,657 ops/s

# Run progress: 40,00% complete, ETA 00:05:01
# Fork: 3 of 5
# Warmup Iteration   1: 78431,925 ops/s
# Warmup Iteration   2: 85647,951 ops/s
# Warmup Iteration   3: 82344,860 ops/s
# Warmup Iteration   4: 84460,417 ops/s
# Warmup Iteration   5: 82812,111 ops/s
Iteration   1: 79655,092 ops/s
Iteration   2: 82829,451 ops/s
Iteration   3: 81701,966 ops/s
Iteration   4: 82361,209 ops/s
Iteration   5: 81968,381 ops/s

# Run progress: 60,00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 67947,716 ops/s
# Warmup Iteration   2: 81564,572 ops/s
# Warmup Iteration   3: 82796,841 ops/s
# Warmup Iteration   4: 80840,787 ops/s
# Warmup Iteration   5: 70650,763 ops/s
Iteration   1: 81336,941 ops/s
Iteration   2: 77526,843 ops/s
Iteration   3: 59496,257 ops/s
Iteration   4: 86519,662 ops/s
Iteration   5: 86340,097 ops/s

# Run progress: 80,00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 77558,595 ops/s
# Warmup Iteration   2: 82011,832 ops/s
# Warmup Iteration   3: 77110,064 ops/s
# Warmup Iteration   4: 79536,037 ops/s
# Warmup Iteration   5: 78795,098 ops/s
Iteration   1: 79258,929 ops/s
Iteration   2: 71508,520 ops/s
Iteration   3: 66236,495 ops/s
Iteration   4: 68202,096 ops/s
Iteration   5: 69664,844 ops/s


Result "jsonvalues.benchmark.mutable.parsing.StringToJsArray_100.java_hash_set":
  85895,434 ±(99.9%) 12531,779 ops/s [Average]
  (min, avg, max) = (59496,257, 85895,434, 122016,912), stdev = 16729,566
  CI (99.9%): [73363,655, 98427,212] (assumes normal distribution)


# Run complete. Total time: 00:08:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                           Mode  Cnt      Score       Error  Units
StringToJsArray_100.java_hash_set  thrpt   25  85895,434 ± 12531,779  ops/s
