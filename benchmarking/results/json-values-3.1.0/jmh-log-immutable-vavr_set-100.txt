# JMH version: 1.21
# VM version: JDK 1.8.0_202, OpenJDK 64-Bit Server VM, 25.202-b05
# VM invoker: /Users/rmerino/.sdkman/candidates/java/8.0.202-zulu/jre/bin/java
# VM options: -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc-log-immutable-vavr_set-100.log
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jsonvalues.benchmark.immutable.parsing.StringToJsArray_100.vavr_set

# Run progress: 0,00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 110117,086 ops/s
# Warmup Iteration   2: 127194,083 ops/s
# Warmup Iteration   3: 138363,974 ops/s
# Warmup Iteration   4: 137702,898 ops/s
# Warmup Iteration   5: 130933,539 ops/s
Iteration   1: 139956,238 ops/s
Iteration   2: 137320,324 ops/s
Iteration   3: 129379,072 ops/s
Iteration   4: 131933,103 ops/s
Iteration   5: 134167,619 ops/s

# Run progress: 20,00% complete, ETA 00:06:41
# Fork: 2 of 5
# Warmup Iteration   1: 118668,986 ops/s
# Warmup Iteration   2: 139294,690 ops/s
# Warmup Iteration   3: 139588,689 ops/s
# Warmup Iteration   4: 135667,181 ops/s
# Warmup Iteration   5: 128231,616 ops/s
Iteration   1: 133119,114 ops/s
Iteration   2: 140486,763 ops/s
Iteration   3: 126182,245 ops/s
Iteration   4: 128276,555 ops/s
Iteration   5: 140142,141 ops/s

# Run progress: 40,00% complete, ETA 00:05:01
# Fork: 3 of 5
# Warmup Iteration   1: 122147,590 ops/s
# Warmup Iteration   2: 131067,768 ops/s
# Warmup Iteration   3: 134635,291 ops/s
# Warmup Iteration   4: 134286,908 ops/s
# Warmup Iteration   5: 136381,092 ops/s
Iteration   1: 124156,382 ops/s
Iteration   2: 122549,851 ops/s
Iteration   3: 120805,915 ops/s
Iteration   4: 127327,577 ops/s
Iteration   5: 129533,766 ops/s

# Run progress: 60,00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 124983,741 ops/s
# Warmup Iteration   2: 132654,277 ops/s
# Warmup Iteration   3: 126677,358 ops/s
# Warmup Iteration   4: 114414,200 ops/s
# Warmup Iteration   5: 126567,048 ops/s
Iteration   1: 127752,931 ops/s
Iteration   2: 119978,338 ops/s
Iteration   3: 126587,359 ops/s
Iteration   4: 134795,847 ops/s
Iteration   5: 122495,288 ops/s

# Run progress: 80,00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 125088,179 ops/s
# Warmup Iteration   2: 109487,888 ops/s
# Warmup Iteration   3: 123002,038 ops/s
# Warmup Iteration   4: 115738,265 ops/s
# Warmup Iteration   5: 113257,938 ops/s
Iteration   1: 111298,551 ops/s
Iteration   2: 110151,654 ops/s
Iteration   3: 121694,054 ops/s
Iteration   4: 117193,913 ops/s
Iteration   5: 129971,208 ops/s


Result "jsonvalues.benchmark.immutable.parsing.StringToJsArray_100.vavr_set":
  127490,232 ±(99.9%) 6138,191 ops/s [Average]
  (min, avg, max) = (110151,654, 127490,232, 140486,763), stdev = 8194,310
  CI (99.9%): [121352,041, 133628,423] (assumes normal distribution)


# Run complete. Total time: 00:08:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      Mode  Cnt       Score      Error  Units
StringToJsArray_100.vavr_set  thrpt   25  127490,232 ± 6138,191  ops/s
