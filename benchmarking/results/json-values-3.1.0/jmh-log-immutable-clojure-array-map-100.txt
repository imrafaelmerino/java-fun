# JMH version: 1.21
# VM version: JDK 1.8.0_202, OpenJDK 64-Bit Server VM, 25.202-b05
# VM invoker: /Users/rmerino/.sdkman/candidates/java/8.0.202-zulu/jre/bin/java
# VM options: -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc-log-immutable-clojure_array_map-100.log
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jsonvalues.benchmark.immutable.parsing.StringToJsObj_100.clojure_array_map

# Run progress: 0,00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 22352,486 ops/s
# Warmup Iteration   2: 79052,839 ops/s
# Warmup Iteration   3: 80020,907 ops/s
# Warmup Iteration   4: 80659,509 ops/s
# Warmup Iteration   5: 80922,076 ops/s
Iteration   1: 80337,531 ops/s
Iteration   2: 80331,065 ops/s
Iteration   3: 80446,696 ops/s
Iteration   4: 80468,316 ops/s
Iteration   5: 79860,386 ops/s

# Run progress: 20,00% complete, ETA 00:06:41
# Fork: 2 of 5
# Warmup Iteration   1: 22137,276 ops/s
# Warmup Iteration   2: 82629,980 ops/s
# Warmup Iteration   3: 84714,855 ops/s
# Warmup Iteration   4: 85623,814 ops/s
# Warmup Iteration   5: 85658,881 ops/s
Iteration   1: 85229,646 ops/s
Iteration   2: 85244,163 ops/s
Iteration   3: 84360,831 ops/s
Iteration   4: 85057,563 ops/s
Iteration   5: 84266,805 ops/s

# Run progress: 40,00% complete, ETA 00:05:01
# Fork: 3 of 5
# Warmup Iteration   1: 23810,882 ops/s
# Warmup Iteration   2: 80469,805 ops/s
# Warmup Iteration   3: 82436,060 ops/s
# Warmup Iteration   4: 83117,112 ops/s
# Warmup Iteration   5: 83117,415 ops/s
Iteration   1: 82883,025 ops/s
Iteration   2: 82869,252 ops/s
Iteration   3: 82695,602 ops/s
Iteration   4: 82729,675 ops/s
Iteration   5: 82658,597 ops/s

# Run progress: 60,00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 24427,643 ops/s
# Warmup Iteration   2: 81272,169 ops/s
# Warmup Iteration   3: 82058,455 ops/s
# Warmup Iteration   4: 82888,903 ops/s
# Warmup Iteration   5: 82940,028 ops/s
Iteration   1: 82808,829 ops/s
Iteration   2: 82607,472 ops/s
Iteration   3: 82603,013 ops/s
Iteration   4: 82655,697 ops/s
Iteration   5: 82491,334 ops/s

# Run progress: 80,00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 23062,198 ops/s
# Warmup Iteration   2: 80776,000 ops/s
# Warmup Iteration   3: 81522,268 ops/s
# Warmup Iteration   4: 82373,664 ops/s
# Warmup Iteration   5: 82635,333 ops/s
Iteration   1: 82282,756 ops/s
Iteration   2: 82180,546 ops/s
Iteration   3: 82260,367 ops/s
Iteration   4: 82116,443 ops/s
Iteration   5: 82004,881 ops/s


Result "jsonvalues.benchmark.immutable.parsing.StringToJsObj_100.clojure_array_map":
  82538,020 ±(99.9%) 1122,606 ops/s [Average]
  (min, avg, max) = (79860,386, 82538,020, 85244,163), stdev = 1498,647
  CI (99.9%): [81415,414, 83660,625] (assumes normal distribution)


# Run complete. Total time: 00:08:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                             Mode  Cnt      Score      Error  Units
StringToJsObj_100.clojure_array_map  thrpt   25  82538,020 ± 1122,606  ops/s
