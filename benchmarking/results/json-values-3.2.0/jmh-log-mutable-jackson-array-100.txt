# JMH version: 1.21
# VM version: JDK 1.8.0_202, OpenJDK 64-Bit Server VM, 25.202-b05
# VM invoker: /Users/rmerino/.sdkman/candidates/java/8.0.202-zulu/jre/bin/java
# VM options: -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc-log-mutable-jackson-array-100.log
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jsonvalues.benchmark.mutable.parsing.StringToJsArray_100.jackson

# Run progress: 0,00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 346600,081 ops/s
# Warmup Iteration   2: 368634,593 ops/s
# Warmup Iteration   3: 368795,419 ops/s
# Warmup Iteration   4: 368566,577 ops/s
# Warmup Iteration   5: 368939,463 ops/s
Iteration   1: 367789,061 ops/s
Iteration   2: 367226,273 ops/s
Iteration   3: 364219,245 ops/s
Iteration   4: 362195,434 ops/s
Iteration   5: 363670,046 ops/s

# Run progress: 20,00% complete, ETA 00:06:41
# Fork: 2 of 5
# Warmup Iteration   1: 351659,392 ops/s
# Warmup Iteration   2: 368335,938 ops/s
# Warmup Iteration   3: 371928,951 ops/s
# Warmup Iteration   4: 372585,622 ops/s
# Warmup Iteration   5: 370233,420 ops/s
Iteration   1: 372123,543 ops/s
Iteration   2: 370509,084 ops/s
Iteration   3: 358652,199 ops/s
Iteration   4: 369536,346 ops/s
Iteration   5: 369122,238 ops/s

# Run progress: 40,00% complete, ETA 00:05:01
# Fork: 3 of 5
# Warmup Iteration   1: 358291,696 ops/s
# Warmup Iteration   2: 378804,410 ops/s
# Warmup Iteration   3: 377013,450 ops/s
# Warmup Iteration   4: 377424,654 ops/s
# Warmup Iteration   5: 376398,525 ops/s
Iteration   1: 378140,293 ops/s
Iteration   2: 378434,496 ops/s
Iteration   3: 380526,827 ops/s
Iteration   4: 380813,413 ops/s
Iteration   5: 375161,660 ops/s

# Run progress: 60,00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 331468,388 ops/s
# Warmup Iteration   2: 356922,285 ops/s
# Warmup Iteration   3: 356185,623 ops/s
# Warmup Iteration   4: 354518,896 ops/s
# Warmup Iteration   5: 356343,912 ops/s
Iteration   1: 353244,982 ops/s
Iteration   2: 353627,958 ops/s
Iteration   3: 356516,126 ops/s
Iteration   4: 344158,652 ops/s
Iteration   5: 207162,637 ops/s

# Run progress: 80,00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 160628,151 ops/s
# Warmup Iteration   2: 342750,419 ops/s
# Warmup Iteration   3: 248095,251 ops/s
# Warmup Iteration   4: 170518,492 ops/s
# Warmup Iteration   5: 297992,253 ops/s
Iteration   1: 358191,575 ops/s
Iteration   2: 358261,842 ops/s
Iteration   3: 356115,707 ops/s
Iteration   4: 358465,656 ops/s
Iteration   5: 358566,875 ops/s


Result "jsonvalues.benchmark.mutable.parsing.StringToJsArray_100.jackson":
  358497,287 ±(99.9%) 24661,685 ops/s [Average]
  (min, avg, max) = (207162,637, 358497,287, 380813,413), stdev = 32922,644
  CI (99.9%): [333835,601, 383158,972] (assumes normal distribution)


# Run complete. Total time: 00:08:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                     Mode  Cnt       Score       Error  Units
StringToJsArray_100.jackson  thrpt   25  358497,287 ± 24661,685  ops/s
