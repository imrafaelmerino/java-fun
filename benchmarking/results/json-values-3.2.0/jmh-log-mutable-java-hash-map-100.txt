# JMH version: 1.21
# VM version: JDK 1.8.0_202, OpenJDK 64-Bit Server VM, 25.202-b05
# VM invoker: /Users/rmerino/.sdkman/candidates/java/8.0.202-zulu/jre/bin/java
# VM options: -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc-log-mutable-java_hash_map-100.log
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jsonvalues.benchmark.mutable.parsing.StringToJsObj_100.java_hash_map

# Run progress: 0,00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 275081,419 ops/s
# Warmup Iteration   2: 286048,563 ops/s
# Warmup Iteration   3: 289152,100 ops/s
# Warmup Iteration   4: 289159,405 ops/s
# Warmup Iteration   5: 289065,726 ops/s
Iteration   1: 289401,085 ops/s
Iteration   2: 289089,832 ops/s
Iteration   3: 286841,161 ops/s
Iteration   4: 289241,022 ops/s
Iteration   5: 288718,238 ops/s

# Run progress: 20,00% complete, ETA 00:06:41
# Fork: 2 of 5
# Warmup Iteration   1: 253102,815 ops/s
# Warmup Iteration   2: 263886,446 ops/s
# Warmup Iteration   3: 263988,263 ops/s
# Warmup Iteration   4: 261975,052 ops/s
# Warmup Iteration   5: 264064,274 ops/s
Iteration   1: 263890,958 ops/s
Iteration   2: 263996,031 ops/s
Iteration   3: 263929,633 ops/s
Iteration   4: 264119,502 ops/s
Iteration   5: 261732,401 ops/s

# Run progress: 40,00% complete, ETA 00:05:01
# Fork: 3 of 5
# Warmup Iteration   1: 260161,345 ops/s
# Warmup Iteration   2: 274540,520 ops/s
# Warmup Iteration   3: 274877,207 ops/s
# Warmup Iteration   4: 273569,526 ops/s
# Warmup Iteration   5: 270898,693 ops/s
Iteration   1: 270987,186 ops/s
Iteration   2: 274373,093 ops/s
Iteration   3: 274244,454 ops/s
Iteration   4: 273988,059 ops/s
Iteration   5: 274385,028 ops/s

# Run progress: 60,00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 254400,863 ops/s
# Warmup Iteration   2: 264862,347 ops/s
# Warmup Iteration   3: 267445,481 ops/s
# Warmup Iteration   4: 266911,952 ops/s
# Warmup Iteration   5: 267321,709 ops/s
Iteration   1: 267358,300 ops/s
Iteration   2: 267111,865 ops/s
Iteration   3: 264700,320 ops/s
Iteration   4: 266934,947 ops/s
Iteration   5: 266718,072 ops/s

# Run progress: 80,00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 265398,027 ops/s
# Warmup Iteration   2: 278302,114 ops/s
# Warmup Iteration   3: 277780,269 ops/s
# Warmup Iteration   4: 275634,348 ops/s
# Warmup Iteration   5: 278151,813 ops/s
Iteration   1: 277928,831 ops/s
Iteration   2: 277989,051 ops/s
Iteration   3: 278270,670 ops/s
Iteration   4: 278076,841 ops/s
Iteration   5: 275410,529 ops/s


Result "jsonvalues.benchmark.mutable.parsing.StringToJsObj_100.java_hash_map":
  273977,484 ±(99.9%) 6819,476 ops/s [Average]
  (min, avg, max) = (261732,401, 273977,484, 289401,085), stdev = 9103,806
  CI (99.9%): [267158,008, 280796,961] (assumes normal distribution)


# Run complete. Total time: 00:08:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                         Mode  Cnt       Score      Error  Units
StringToJsObj_100.java_hash_map  thrpt   25  273977,484 ± 6819,476  ops/s
