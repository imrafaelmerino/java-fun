# JMH version: 1.21
# VM version: JDK 1.8.0_202, OpenJDK 64-Bit Server VM, 25.202-b05
# VM invoker: /Users/rmerino/.sdkman/candidates/java/8.0.202-zulu/jre/bin/java
# VM options: -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc-log-immutable-scala-hash-map-100.log
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jsonvalues.benchmark.immutable.parsing.StringToJsObj_100.scala_hash_map

# Run progress: 0,00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 111491,179 ops/s
# Warmup Iteration   2: 146637,523 ops/s
# Warmup Iteration   3: 150905,348 ops/s
# Warmup Iteration   4: 151330,834 ops/s
# Warmup Iteration   5: 152705,901 ops/s
Iteration   1: 149996,946 ops/s
Iteration   2: 152986,676 ops/s
Iteration   3: 153327,175 ops/s
Iteration   4: 152967,886 ops/s
Iteration   5: 153164,555 ops/s

# Run progress: 20,00% complete, ETA 00:06:42
# Fork: 2 of 5
# Warmup Iteration   1: 147369,922 ops/s
# Warmup Iteration   2: 158110,330 ops/s
# Warmup Iteration   3: 157784,649 ops/s
# Warmup Iteration   4: 157946,026 ops/s
# Warmup Iteration   5: 157900,621 ops/s
Iteration   1: 158043,088 ops/s
Iteration   2: 158125,076 ops/s
Iteration   3: 158162,932 ops/s
Iteration   4: 157937,210 ops/s
Iteration   5: 158041,703 ops/s

# Run progress: 40,00% complete, ETA 00:05:01
# Fork: 3 of 5
# Warmup Iteration   1: 150640,321 ops/s
# Warmup Iteration   2: 161369,739 ops/s
# Warmup Iteration   3: 161491,129 ops/s
# Warmup Iteration   4: 161436,471 ops/s
# Warmup Iteration   5: 161350,795 ops/s
Iteration   1: 161358,462 ops/s
Iteration   2: 161463,825 ops/s
Iteration   3: 161228,204 ops/s
Iteration   4: 161386,890 ops/s
Iteration   5: 161369,104 ops/s

# Run progress: 60,00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 144202,277 ops/s
# Warmup Iteration   2: 155993,500 ops/s
# Warmup Iteration   3: 156079,385 ops/s
# Warmup Iteration   4: 155947,755 ops/s
# Warmup Iteration   5: 155854,645 ops/s
Iteration   1: 155965,849 ops/s
Iteration   2: 156034,956 ops/s
Iteration   3: 155915,597 ops/s
Iteration   4: 155991,279 ops/s
Iteration   5: 155884,439 ops/s

# Run progress: 80,00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 146730,530 ops/s
# Warmup Iteration   2: 158083,028 ops/s
# Warmup Iteration   3: 157344,175 ops/s
# Warmup Iteration   4: 157988,375 ops/s
# Warmup Iteration   5: 158088,323 ops/s
Iteration   1: 157854,334 ops/s
Iteration   2: 158062,703 ops/s
Iteration   3: 158126,561 ops/s
Iteration   4: 158017,596 ops/s
Iteration   5: 157915,375 ops/s


Result "jsonvalues.benchmark.immutable.parsing.StringToJsObj_100.scala_hash_map":
  157173,137 ±(99.9%) 2268,478 ops/s [Average]
  (min, avg, max) = (149996,946, 157173,137, 161463,825), stdev = 3028,353
  CI (99.9%): [154904,659, 159441,615] (assumes normal distribution)


# Run complete. Total time: 00:08:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          Mode  Cnt       Score      Error  Units
StringToJsObj_100.scala_hash_map  thrpt   25  157173,137 ± 2268,478  ops/s
