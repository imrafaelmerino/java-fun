# JMH version: 1.21
# VM version: JDK 1.8.0_202, OpenJDK 64-Bit Server VM, 25.202-b05
# VM invoker: /Users/rmerino/.sdkman/candidates/java/8.0.202-zulu/jre/bin/java
# VM options: -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc-log-immutable-scala_vector-100.log
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jsonvalues.benchmark.immutable.parsing.StringToJsArray_100.scala_vector

# Run progress: 0,00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 154004,265 ops/s
# Warmup Iteration   2: 126471,608 ops/s
# Warmup Iteration   3: 164169,097 ops/s
# Warmup Iteration   4: 178003,838 ops/s
# Warmup Iteration   5: 176485,911 ops/s
Iteration   1: 172448,688 ops/s
Iteration   2: 175192,551 ops/s
Iteration   3: 93368,041 ops/s
Iteration   4: 85274,596 ops/s
Iteration   5: 162595,233 ops/s

# Run progress: 20,00% complete, ETA 00:06:41
# Fork: 2 of 5
# Warmup Iteration   1: 154173,102 ops/s
# Warmup Iteration   2: 172604,530 ops/s
# Warmup Iteration   3: 168655,730 ops/s
# Warmup Iteration   4: 99185,783 ops/s
# Warmup Iteration   5: 55641,973 ops/s
Iteration   1: 50604,413 ops/s
Iteration   2: 70812,076 ops/s
Iteration   3: 92135,694 ops/s
Iteration   4: 158406,784 ops/s
Iteration   5: 162674,328 ops/s

# Run progress: 40,00% complete, ETA 00:05:01
# Fork: 3 of 5
# Warmup Iteration   1: 142621,597 ops/s
# Warmup Iteration   2: 155218,013 ops/s
# Warmup Iteration   3: 175994,648 ops/s
# Warmup Iteration   4: 151207,842 ops/s
# Warmup Iteration   5: 151881,161 ops/s
Iteration   1: 151889,018 ops/s
Iteration   2: 169381,356 ops/s
Iteration   3: 158688,505 ops/s
Iteration   4: 174852,620 ops/s
Iteration   5: 174749,942 ops/s

# Run progress: 60,00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 147380,691 ops/s
# Warmup Iteration   2: 146696,827 ops/s
# Warmup Iteration   3: 168498,666 ops/s
# Warmup Iteration   4: 171974,650 ops/s
# Warmup Iteration   5: 169994,746 ops/s
Iteration   1: 160146,396 ops/s
Iteration   2: 151746,443 ops/s
Iteration   3: 142105,480 ops/s
Iteration   4: 152468,500 ops/s
Iteration   5: 152099,036 ops/s

# Run progress: 80,00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 135378,786 ops/s
# Warmup Iteration   2: 172209,393 ops/s
# Warmup Iteration   3: 150428,854 ops/s
# Warmup Iteration   4: 133566,712 ops/s
# Warmup Iteration   5: 151868,262 ops/s
Iteration   1: 164438,510 ops/s
Iteration   2: 166590,485 ops/s
Iteration   3: 170904,560 ops/s
Iteration   4: 170806,575 ops/s
Iteration   5: 153320,707 ops/s


Result "jsonvalues.benchmark.immutable.parsing.StringToJsArray_100.scala_vector":
  145508,021 ±(99.9%) 26985,740 ops/s [Average]
  (min, avg, max) = (50604,413, 145508,021, 175192,551), stdev = 36025,191
  CI (99.9%): [118522,282, 172493,761] (assumes normal distribution)


# Run complete. Total time: 00:08:22

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          Mode  Cnt       Score       Error  Units
StringToJsArray_100.scala_vector  thrpt   25  145508,021 ± 26985,740  ops/s
