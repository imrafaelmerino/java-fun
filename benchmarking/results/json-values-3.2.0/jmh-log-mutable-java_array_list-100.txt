# JMH version: 1.21
# VM version: JDK 1.8.0_202, OpenJDK 64-Bit Server VM, 25.202-b05
# VM invoker: /Users/rmerino/.sdkman/candidates/java/8.0.202-zulu/jre/bin/java
# VM options: -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc-log-mutable-java_array_list-100.log
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jsonvalues.benchmark.mutable.parsing.StringToJsArray_100.java_array_list

# Run progress: 0,00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 110077,826 ops/s
# Warmup Iteration   2: 115443,106 ops/s
# Warmup Iteration   3: 115680,250 ops/s
# Warmup Iteration   4: 114642,086 ops/s
# Warmup Iteration   5: 115654,166 ops/s
Iteration   1: 115689,303 ops/s
Iteration   2: 115409,543 ops/s
Iteration   3: 112599,930 ops/s
Iteration   4: 115351,319 ops/s
Iteration   5: 114414,024 ops/s

# Run progress: 20,00% complete, ETA 00:06:41
# Fork: 2 of 5
# Warmup Iteration   1: 110739,413 ops/s
# Warmup Iteration   2: 114231,162 ops/s
# Warmup Iteration   3: 113349,185 ops/s
# Warmup Iteration   4: 73451,933 ops/s
# Warmup Iteration   5: 62512,027 ops/s
Iteration   1: 100862,306 ops/s
Iteration   2: 97111,246 ops/s
Iteration   3: 27794,792 ops/s
Iteration   4: 47337,389 ops/s
Iteration   5: 111154,794 ops/s

# Run progress: 40,00% complete, ETA 00:05:01
# Fork: 3 of 5
# Warmup Iteration   1: 210557,495 ops/s
# Warmup Iteration   2: 223154,157 ops/s
# Warmup Iteration   3: 226676,469 ops/s
# Warmup Iteration   4: 228004,797 ops/s
# Warmup Iteration   5: 227582,801 ops/s
Iteration   1: 227307,661 ops/s
Iteration   2: 227026,992 ops/s
Iteration   3: 225179,519 ops/s
Iteration   4: 226405,386 ops/s
Iteration   5: 227616,406 ops/s

# Run progress: 60,00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 107699,529 ops/s
# Warmup Iteration   2: 114741,208 ops/s
# Warmup Iteration   3: 114355,919 ops/s
# Warmup Iteration   4: 113385,033 ops/s
# Warmup Iteration   5: 114585,154 ops/s
Iteration   1: 113207,284 ops/s
Iteration   2: 114797,414 ops/s
Iteration   3: 115166,346 ops/s
Iteration   4: 115638,817 ops/s
Iteration   5: 111507,743 ops/s

# Run progress: 80,00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 85375,860 ops/s
# Warmup Iteration   2: 87421,622 ops/s
# Warmup Iteration   3: 91551,282 ops/s
# Warmup Iteration   4: 101492,721 ops/s
# Warmup Iteration   5: 104305,347 ops/s
Iteration   1: 111391,647 ops/s
Iteration   2: 113456,965 ops/s
Iteration   3: 112948,638 ops/s
Iteration   4: 112660,882 ops/s
Iteration   5: 112053,889 ops/s


Result "jsonvalues.benchmark.mutable.parsing.StringToJsArray_100.java_array_list":
  128963,609 ±(99.9%) 40540,314 ops/s [Average]
  (min, avg, max) = (27794,792, 128963,609, 227616,406), stdev = 54120,160
  CI (99.9%): [88423,295, 169503,924] (assumes normal distribution)


# Run complete. Total time: 00:08:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                             Mode  Cnt       Score       Error  Units
StringToJsArray_100.java_array_list  thrpt   25  128963,609 ± 40540,314  ops/s
