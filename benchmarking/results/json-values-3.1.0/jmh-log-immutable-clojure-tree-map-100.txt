# JMH version: 1.21
# VM version: JDK 1.8.0_202, OpenJDK 64-Bit Server VM, 25.202-b05
# VM invoker: /Users/rmerino/.sdkman/candidates/java/8.0.202-zulu/jre/bin/java
# VM options: -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc-log-immutable-clojure_tree_map-100.log
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jsonvalues.benchmark.immutable.parsing.StringToJsObj_100.clojure_tree_map

# Run progress: 0,00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 22411,644 ops/s
# Warmup Iteration   2: 84340,211 ops/s
# Warmup Iteration   3: 85763,279 ops/s
# Warmup Iteration   4: 86418,331 ops/s
# Warmup Iteration   5: 86419,639 ops/s
Iteration   1: 86271,448 ops/s
Iteration   2: 86120,767 ops/s
Iteration   3: 86009,337 ops/s
Iteration   4: 85859,357 ops/s
Iteration   5: 85944,321 ops/s

# Run progress: 20,00% complete, ETA 00:06:41
# Fork: 2 of 5
# Warmup Iteration   1: 25287,398 ops/s
# Warmup Iteration   2: 87440,971 ops/s
# Warmup Iteration   3: 89996,164 ops/s
# Warmup Iteration   4: 90055,621 ops/s
# Warmup Iteration   5: 89828,749 ops/s
Iteration   1: 89624,216 ops/s
Iteration   2: 89419,219 ops/s
Iteration   3: 89355,809 ops/s
Iteration   4: 89461,644 ops/s
Iteration   5: 89455,162 ops/s

# Run progress: 40,00% complete, ETA 00:05:01
# Fork: 3 of 5
# Warmup Iteration   1: 25086,303 ops/s
# Warmup Iteration   2: 83065,667 ops/s
# Warmup Iteration   3: 85491,144 ops/s
# Warmup Iteration   4: 85333,509 ops/s
# Warmup Iteration   5: 85461,753 ops/s
Iteration   1: 85142,001 ops/s
Iteration   2: 85119,336 ops/s
Iteration   3: 84906,005 ops/s
Iteration   4: 84941,130 ops/s
Iteration   5: 84506,800 ops/s

# Run progress: 60,00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 26737,991 ops/s
# Warmup Iteration   2: 88365,153 ops/s
# Warmup Iteration   3: 86812,910 ops/s
# Warmup Iteration   4: 84569,578 ops/s
# Warmup Iteration   5: 90557,406 ops/s
Iteration   1: 90130,551 ops/s
Iteration   2: 90455,398 ops/s
Iteration   3: 90281,569 ops/s
Iteration   4: 87411,604 ops/s
Iteration   5: 84399,964 ops/s

# Run progress: 80,00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 24978,822 ops/s
# Warmup Iteration   2: 83274,388 ops/s
# Warmup Iteration   3: 85186,699 ops/s
# Warmup Iteration   4: 84288,460 ops/s
# Warmup Iteration   5: 85604,730 ops/s
Iteration   1: 85593,382 ops/s
Iteration   2: 85544,756 ops/s
Iteration   3: 85230,340 ops/s
Iteration   4: 84291,694 ops/s
Iteration   5: 85270,499 ops/s


Result "jsonvalues.benchmark.immutable.parsing.StringToJsObj_100.clojure_tree_map":
  86829,852 ±(99.9%) 1626,662 ops/s [Average]
  (min, avg, max) = (84291,694, 86829,852, 90455,398), stdev = 2171,548
  CI (99.9%): [85203,190, 88456,515] (assumes normal distribution)


# Run complete. Total time: 00:08:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                            Mode  Cnt      Score      Error  Units
StringToJsObj_100.clojure_tree_map  thrpt   25  86829,852 ± 1626,662  ops/s
