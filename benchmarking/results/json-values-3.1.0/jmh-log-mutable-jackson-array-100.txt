# JMH version: 1.21
# VM version: JDK 1.8.0_202, OpenJDK 64-Bit Server VM, 25.202-b05
# VM invoker: /Users/rmerino/.sdkman/candidates/java/8.0.202-zulu/jre/bin/java
# VM options: -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc-log-mutable-jackson-100.log
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jsonvalues.benchmark.mutable.parsing.StringToJsArray_100.jackson

# Run progress: 0,00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 284343,881 ops/s
# Warmup Iteration   2: 304222,261 ops/s
# Warmup Iteration   3: 316206,922 ops/s
# Warmup Iteration   4: 281894,319 ops/s
# Warmup Iteration   5: 323301,695 ops/s
Iteration   1: 273460,443 ops/s
Iteration   2: 318616,817 ops/s
Iteration   3: 328771,432 ops/s
Iteration   4: 320495,169 ops/s
Iteration   5: 320899,352 ops/s

# Run progress: 20,00% complete, ETA 00:06:42
# Fork: 2 of 5
# Warmup Iteration   1: 315605,065 ops/s
# Warmup Iteration   2: 326027,899 ops/s
# Warmup Iteration   3: 333841,833 ops/s
# Warmup Iteration   4: 341933,175 ops/s
# Warmup Iteration   5: 302266,311 ops/s
Iteration   1: 310103,066 ops/s
Iteration   2: 321299,785 ops/s
Iteration   3: 327602,833 ops/s
Iteration   4: 336002,304 ops/s
Iteration   5: 337937,918 ops/s

# Run progress: 40,00% complete, ETA 00:05:01
# Fork: 3 of 5
# Warmup Iteration   1: 304259,706 ops/s
# Warmup Iteration   2: 272455,241 ops/s
# Warmup Iteration   3: 307002,909 ops/s
# Warmup Iteration   4: 259059,871 ops/s
# Warmup Iteration   5: 237719,765 ops/s
Iteration   1: 227344,722 ops/s
Iteration   2: 233123,312 ops/s
Iteration   3: 218906,676 ops/s
Iteration   4: 236637,992 ops/s
Iteration   5: 231982,875 ops/s

# Run progress: 60,00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 213249,777 ops/s
# Warmup Iteration   2: 231264,597 ops/s
# Warmup Iteration   3: 223169,039 ops/s
# Warmup Iteration   4: 296896,333 ops/s
# Warmup Iteration   5: 295307,483 ops/s
Iteration   1: 292485,478 ops/s
Iteration   2: 295066,524 ops/s
Iteration   3: 248812,844 ops/s
Iteration   4: 266135,196 ops/s
Iteration   5: 274844,326 ops/s

# Run progress: 80,00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 241121,990 ops/s
# Warmup Iteration   2: 244786,842 ops/s
# Warmup Iteration   3: 264052,980 ops/s
# Warmup Iteration   4: 301587,983 ops/s
# Warmup Iteration   5: 330530,787 ops/s
Iteration   1: 326691,579 ops/s
Iteration   2: 320990,933 ops/s
Iteration   3: 294092,408 ops/s
Iteration   4: 279979,048 ops/s
Iteration   5: 260192,828 ops/s


Result "jsonvalues.benchmark.mutable.parsing.StringToJsArray_100.jackson":
  288099,034 ±(99.9%) 28959,431 ops/s [Average]
  (min, avg, max) = (218906,676, 288099,034, 337937,918), stdev = 38660,011
  CI (99.9%): [259139,604, 317058,465] (assumes normal distribution)


# Run complete. Total time: 00:08:22

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                     Mode  Cnt       Score       Error  Units
StringToJsArray_100.jackson  thrpt   25  288099,034 ± 28959,431  ops/s
