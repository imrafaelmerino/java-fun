# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b18
# VM invoker: /Users/imrafaelmerino/.sdkman/candidates/java/8.0.232-zulu/jre/bin/java
# VM options: -Xms256m -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc-log-jackson-object-100.log
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jsonvalues.benchmark.mutable.parsing.StringToJsObj_100.jackson

# Run progress: 0.00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 23929.574 ops/s
# Warmup Iteration   2: 30841.093 ops/s
# Warmup Iteration   3: 31647.794 ops/s
# Warmup Iteration   4: 32496.123 ops/s
# Warmup Iteration   5: 32939.496 ops/s
Iteration   1: 31973.169 ops/s
Iteration   2: 24269.283 ops/s
Iteration   3: 31920.519 ops/s
Iteration   4: 32650.450 ops/s
Iteration   5: 32549.595 ops/s

# Run progress: 20.00% complete, ETA 00:06:42
# Fork: 2 of 5
# Warmup Iteration   1: 30123.386 ops/s
# Warmup Iteration   2: 34284.005 ops/s
# Warmup Iteration   3: 33421.360 ops/s
# Warmup Iteration   4: 33382.592 ops/s
# Warmup Iteration   5: 31831.795 ops/s
Iteration   1: 33002.207 ops/s
Iteration   2: 32994.531 ops/s
Iteration   3: 32561.468 ops/s
Iteration   4: 33387.214 ops/s
Iteration   5: 32997.029 ops/s

# Run progress: 40.00% complete, ETA 00:05:01
# Fork: 3 of 5
# Warmup Iteration   1: 29194.471 ops/s
# Warmup Iteration   2: 33082.448 ops/s
# Warmup Iteration   3: 32824.386 ops/s
# Warmup Iteration   4: 32543.525 ops/s
# Warmup Iteration   5: 31624.331 ops/s
Iteration   1: 32709.265 ops/s
Iteration   2: 33654.847 ops/s
Iteration   3: 33156.725 ops/s
Iteration   4: 32452.449 ops/s
Iteration   5: 33481.176 ops/s

# Run progress: 60.00% complete, ETA 00:03:21
# Fork: 4 of 5
# Warmup Iteration   1: 30021.844 ops/s
# Warmup Iteration   2: 33286.553 ops/s
# Warmup Iteration   3: 33322.389 ops/s
# Warmup Iteration   4: 33109.902 ops/s
# Warmup Iteration   5: 32235.931 ops/s
Iteration   1: 33661.463 ops/s
Iteration   2: 33489.685 ops/s
Iteration   3: 31818.492 ops/s
Iteration   4: 33272.564 ops/s
Iteration   5: 33565.254 ops/s

# Run progress: 80.00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 29288.722 ops/s
# Warmup Iteration   2: 32910.368 ops/s
# Warmup Iteration   3: 32626.888 ops/s
# Warmup Iteration   4: 32634.153 ops/s
# Warmup Iteration   5: 32182.030 ops/s
Iteration   1: 33611.224 ops/s
Iteration   2: 32610.976 ops/s
Iteration   3: 31952.192 ops/s
Iteration   4: 32636.001 ops/s
Iteration   5: 33136.581 ops/s


Result "jsonvalues.benchmark.mutable.parsing.StringToJsObj_100.jackson":
  32540.574 ±(99.9%) 1360.307 ops/s [Average]
  (min, avg, max) = (24269.283, 32540.574, 33661.463), stdev = 1815.970
  CI (99.9%): [31180.268, 33900.881] (assumes normal distribution)


# Run complete. Total time: 00:08:22

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                   Mode  Cnt      Score      Error  Units
StringToJsObj_100.jackson  thrpt   25  32540.574 ± 1360.307  ops/s

Benchmark result is saved to jmh-result.json
