# JMH version: 1.21
# VM version: JDK 1.8.0_202, OpenJDK 64-Bit Server VM, 25.202-b05
# VM invoker: /Users/rmerino/.sdkman/candidates/java/8.0.202-zulu/jre/bin/java
# VM options: -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc-log-immutable-clojure_vector-100.log
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jsonvalues.benchmark.immutable.parsing.StringToJsArray_100.clojure_vector

# Run progress: 0,00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 16866,713 ops/s
# Warmup Iteration   2: 115804,730 ops/s
# Warmup Iteration   3: 118581,474 ops/s
# Warmup Iteration   4: 120425,190 ops/s
# Warmup Iteration   5: 123631,490 ops/s
Iteration   1: 122831,745 ops/s
Iteration   2: 116447,805 ops/s
Iteration   3: 118641,956 ops/s
Iteration   4: 120714,995 ops/s
Iteration   5: 124300,078 ops/s

# Run progress: 20,00% complete, ETA 00:06:41
# Fork: 2 of 5
# Warmup Iteration   1: 11317,404 ops/s
# Warmup Iteration   2: 60130,107 ops/s
# Warmup Iteration   3: 77348,018 ops/s
# Warmup Iteration   4: 81605,639 ops/s
# Warmup Iteration   5: 84822,021 ops/s
Iteration   1: 83674,711 ops/s
Iteration   2: 83767,919 ops/s
Iteration   3: 81373,217 ops/s
Iteration   4: 83777,164 ops/s
Iteration   5: 80403,879 ops/s

# Run progress: 40,00% complete, ETA 00:05:01
# Fork: 3 of 5
# Warmup Iteration   1: 18454,306 ops/s
# Warmup Iteration   2: 134804,167 ops/s
# Warmup Iteration   3: 141338,408 ops/s
# Warmup Iteration   4: 136897,678 ops/s
# Warmup Iteration   5: 133979,200 ops/s
Iteration   1: 139889,130 ops/s
Iteration   2: 133138,856 ops/s
Iteration   3: 133735,414 ops/s
Iteration   4: 138172,911 ops/s
Iteration   5: 140983,231 ops/s

# Run progress: 60,00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 38467,544 ops/s
# Warmup Iteration   2: 145708,184 ops/s
# Warmup Iteration   3: 149629,232 ops/s
# Warmup Iteration   4: 149146,207 ops/s
# Warmup Iteration   5: 152477,159 ops/s
Iteration   1: 152502,897 ops/s
Iteration   2: 150577,363 ops/s
Iteration   3: 143412,613 ops/s
Iteration   4: 145275,233 ops/s
Iteration   5: 143464,621 ops/s

# Run progress: 80,00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 15124,857 ops/s
# Warmup Iteration   2: 79047,715 ops/s
# Warmup Iteration   3: 83143,697 ops/s
# Warmup Iteration   4: 80384,792 ops/s
# Warmup Iteration   5: 82741,849 ops/s
Iteration   1: 83419,976 ops/s
Iteration   2: 81987,495 ops/s
Iteration   3: 83225,888 ops/s
Iteration   4: 81810,153 ops/s
Iteration   5: 73540,276 ops/s


Result "jsonvalues.benchmark.immutable.parsing.StringToJsArray_100.clojure_vector":
  113642,781 ±(99.9%) 21101,012 ops/s [Average]
  (min, avg, max) = (73540,276, 113642,781, 152502,897), stdev = 28169,247
  CI (99.9%): [92541,769, 134743,793] (assumes normal distribution)


# Run complete. Total time: 00:08:22

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                            Mode  Cnt       Score       Error  Units
StringToJsArray_100.clojure_vector  thrpt   25  113642,781 ± 21101,012  ops/s
