# JMH version: 1.21
# VM version: JDK 1.8.0_202, OpenJDK 64-Bit Server VM, 25.202-b05
# VM invoker: /Users/rmerino/.sdkman/candidates/java/8.0.202-zulu/jre/bin/java
# VM options: -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc-log-immutable-clojure-hash-map-100.log
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jsonvalues.benchmark.immutable.parsing.StringToJsObj_100.clojure_hash_map

# Run progress: 0,00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 26834,468 ops/s
# Warmup Iteration   2: 89440,320 ops/s
# Warmup Iteration   3: 91288,582 ops/s
# Warmup Iteration   4: 91953,722 ops/s
# Warmup Iteration   5: 91910,232 ops/s
Iteration   1: 91675,856 ops/s
Iteration   2: 91585,315 ops/s
Iteration   3: 91561,331 ops/s
Iteration   4: 91286,550 ops/s
Iteration   5: 91360,818 ops/s

# Run progress: 20,00% complete, ETA 00:06:41
# Fork: 2 of 5
# Warmup Iteration   1: 29182,158 ops/s
# Warmup Iteration   2: 90304,153 ops/s
# Warmup Iteration   3: 91806,046 ops/s
# Warmup Iteration   4: 92674,491 ops/s
# Warmup Iteration   5: 92381,765 ops/s
Iteration   1: 92356,952 ops/s
Iteration   2: 92255,002 ops/s
Iteration   3: 91967,350 ops/s
Iteration   4: 92143,229 ops/s
Iteration   5: 92050,901 ops/s

# Run progress: 40,00% complete, ETA 00:05:01
# Fork: 3 of 5
# Warmup Iteration   1: 22388,875 ops/s
# Warmup Iteration   2: 91810,689 ops/s
# Warmup Iteration   3: 93744,796 ops/s
# Warmup Iteration   4: 93538,442 ops/s
# Warmup Iteration   5: 93561,578 ops/s
Iteration   1: 93488,124 ops/s
Iteration   2: 92739,063 ops/s
Iteration   3: 93286,896 ops/s
Iteration   4: 93216,989 ops/s
Iteration   5: 93157,269 ops/s

# Run progress: 60,00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 25281,186 ops/s
# Warmup Iteration   2: 90228,254 ops/s
# Warmup Iteration   3: 92366,471 ops/s
# Warmup Iteration   4: 92590,275 ops/s
# Warmup Iteration   5: 92350,706 ops/s
Iteration   1: 92141,068 ops/s
Iteration   2: 92147,077 ops/s
Iteration   3: 92082,285 ops/s
Iteration   4: 91858,924 ops/s
Iteration   5: 91971,860 ops/s

# Run progress: 80,00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 26202,743 ops/s
# Warmup Iteration   2: 91297,388 ops/s
# Warmup Iteration   3: 93335,484 ops/s
# Warmup Iteration   4: 93911,670 ops/s
# Warmup Iteration   5: 93639,325 ops/s
Iteration   1: 93666,899 ops/s
Iteration   2: 93476,466 ops/s
Iteration   3: 93353,081 ops/s
Iteration   4: 93352,241 ops/s
Iteration   5: 93347,349 ops/s


Result "jsonvalues.benchmark.immutable.parsing.StringToJsObj_100.clojure_hash_map":
  92461,156 ±(99.9%) 572,659 ops/s [Average]
  (min, avg, max) = (91286,550, 92461,156, 93666,899), stdev = 764,483
  CI (99.9%): [91888,497, 93033,815] (assumes normal distribution)


# Run complete. Total time: 00:08:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                            Mode  Cnt      Score     Error  Units
StringToJsObj_100.clojure_hash_map  thrpt   25  92461,156 ± 572,659  ops/s
