# JMH version: 1.21
# VM version: JDK 1.8.0_202, OpenJDK 64-Bit Server VM, 25.202-b05
# VM invoker: /Users/rmerino/.sdkman/candidates/java/8.0.202-zulu/jre/bin/java
# VM options: -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc-log-mutable-jackson-100.log
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jsonvalues.benchmark.mutable.parsing.StringToJsObj_100.jackson

# Run progress: 0,00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 267676,038 ops/s
# Warmup Iteration   2: 279375,982 ops/s
# Warmup Iteration   3: 280666,173 ops/s
# Warmup Iteration   4: 280390,600 ops/s
# Warmup Iteration   5: 278782,181 ops/s
Iteration   1: 278777,492 ops/s
Iteration   2: 280518,381 ops/s
Iteration   3: 279468,450 ops/s
Iteration   4: 280550,020 ops/s
Iteration   5: 280501,875 ops/s

# Run progress: 20,00% complete, ETA 00:06:41
# Fork: 2 of 5
# Warmup Iteration   1: 267182,272 ops/s
# Warmup Iteration   2: 282136,224 ops/s
# Warmup Iteration   3: 281999,966 ops/s
# Warmup Iteration   4: 282313,129 ops/s
# Warmup Iteration   5: 282059,469 ops/s
Iteration   1: 281979,233 ops/s
Iteration   2: 281961,202 ops/s
Iteration   3: 281558,608 ops/s
Iteration   4: 281924,352 ops/s
Iteration   5: 281976,005 ops/s

# Run progress: 40,00% complete, ETA 00:05:01
# Fork: 3 of 5
# Warmup Iteration   1: 266425,335 ops/s
# Warmup Iteration   2: 281393,244 ops/s
# Warmup Iteration   3: 281326,762 ops/s
# Warmup Iteration   4: 280925,086 ops/s
# Warmup Iteration   5: 280779,231 ops/s
Iteration   1: 281547,993 ops/s
Iteration   2: 280689,259 ops/s
Iteration   3: 281006,444 ops/s
Iteration   4: 281038,009 ops/s
Iteration   5: 281419,401 ops/s

# Run progress: 60,00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 270318,537 ops/s
# Warmup Iteration   2: 281528,128 ops/s
# Warmup Iteration   3: 282768,819 ops/s
# Warmup Iteration   4: 281868,012 ops/s
# Warmup Iteration   5: 282789,377 ops/s
Iteration   1: 282871,595 ops/s
Iteration   2: 281218,752 ops/s
Iteration   3: 282696,764 ops/s
Iteration   4: 282642,042 ops/s
Iteration   5: 282435,491 ops/s

# Run progress: 80,00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 270585,414 ops/s
# Warmup Iteration   2: 282449,283 ops/s
# Warmup Iteration   3: 282409,863 ops/s
# Warmup Iteration   4: 282384,484 ops/s
# Warmup Iteration   5: 282247,666 ops/s
Iteration   1: 282796,765 ops/s
Iteration   2: 282425,658 ops/s
Iteration   3: 282522,496 ops/s
Iteration   4: 282548,244 ops/s
Iteration   5: 282424,405 ops/s


Result "jsonvalues.benchmark.mutable.parsing.StringToJsObj_100.jackson":
  281579,957 ±(99.9%) 799,310 ops/s [Average]
  (min, avg, max) = (278777,492, 281579,957, 282871,595), stdev = 1067,056
  CI (99.9%): [280780,647, 282379,267] (assumes normal distribution)


# Run complete. Total time: 00:08:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                   Mode  Cnt       Score     Error  Units
StringToJsObj_100.jackson  thrpt   25  281579,957 ± 799,310  ops/s
