# JMH version: 1.21
# VM version: JDK 1.8.0_202, OpenJDK 64-Bit Server VM, 25.202-b05
# VM invoker: /Users/rmerino/.sdkman/candidates/java/8.0.202-zulu/jre/bin/java
# VM options: -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc-log-immutable-vavr_hash_map-100.log
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jsonvalues.benchmark.immutable.parsing.StringToJsObj_100.vavr_hash_map

# Run progress: 0,00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 139795,095 ops/s
# Warmup Iteration   2: 148553,734 ops/s
# Warmup Iteration   3: 148844,454 ops/s
# Warmup Iteration   4: 149146,813 ops/s
# Warmup Iteration   5: 147169,881 ops/s
Iteration   1: 149199,933 ops/s
Iteration   2: 148853,802 ops/s
Iteration   3: 148429,435 ops/s
Iteration   4: 148969,549 ops/s
Iteration   5: 149007,754 ops/s

# Run progress: 20,00% complete, ETA 00:06:41
# Fork: 2 of 5
# Warmup Iteration   1: 142422,683 ops/s
# Warmup Iteration   2: 149841,370 ops/s
# Warmup Iteration   3: 149850,652 ops/s
# Warmup Iteration   4: 149400,876 ops/s
# Warmup Iteration   5: 149786,486 ops/s
Iteration   1: 149695,376 ops/s
Iteration   2: 149870,492 ops/s
Iteration   3: 149862,513 ops/s
Iteration   4: 149878,181 ops/s
Iteration   5: 147926,752 ops/s

# Run progress: 40,00% complete, ETA 00:05:01
# Fork: 3 of 5
# Warmup Iteration   1: 141940,821 ops/s
# Warmup Iteration   2: 149068,712 ops/s
# Warmup Iteration   3: 149218,217 ops/s
# Warmup Iteration   4: 147749,300 ops/s
# Warmup Iteration   5: 149273,596 ops/s
Iteration   1: 149209,779 ops/s
Iteration   2: 149180,024 ops/s
Iteration   3: 149325,073 ops/s
Iteration   4: 145813,437 ops/s
Iteration   5: 149251,208 ops/s

# Run progress: 60,00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 137204,395 ops/s
# Warmup Iteration   2: 143687,086 ops/s
# Warmup Iteration   3: 142260,381 ops/s
# Warmup Iteration   4: 145534,570 ops/s
# Warmup Iteration   5: 145293,432 ops/s
Iteration   1: 144137,528 ops/s
Iteration   2: 145450,650 ops/s
Iteration   3: 145504,835 ops/s
Iteration   4: 145521,002 ops/s
Iteration   5: 145429,303 ops/s

# Run progress: 80,00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 141618,212 ops/s
# Warmup Iteration   2: 150682,807 ops/s
# Warmup Iteration   3: 150635,052 ops/s
# Warmup Iteration   4: 150705,600 ops/s
# Warmup Iteration   5: 150559,183 ops/s
Iteration   1: 150688,836 ops/s
Iteration   2: 150716,064 ops/s
Iteration   3: 150432,728 ops/s
Iteration   4: 150693,217 ops/s
Iteration   5: 149955,573 ops/s


Result "jsonvalues.benchmark.immutable.parsing.StringToJsObj_100.vavr_hash_map":
  148520,122 ±(99.9%) 1481,520 ops/s [Average]
  (min, avg, max) = (144137,528, 148520,122, 150716,064), stdev = 1977,786
  CI (99.9%): [147038,602, 150001,641] (assumes normal distribution)


# Run complete. Total time: 00:08:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                         Mode  Cnt       Score      Error  Units
StringToJsObj_100.vavr_hash_map  thrpt   25  148520,122 ± 1481,520  ops/s
