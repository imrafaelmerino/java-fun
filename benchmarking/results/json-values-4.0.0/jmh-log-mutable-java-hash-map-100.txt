# JMH version: 1.21
# VM version: JDK 1.8.0_202, OpenJDK 64-Bit Server VM, 25.202-b05
# VM invoker: /Users/rmerino/.sdkman/candidates/java/8.0.202-zulu/jre/bin/java
# VM options: -Xms256m -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc-log-mutable-java_hash_map-100.log
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jsonvalues.benchmark.mutable.parsing.StringToJsObj_100.java_hash_map

# Run progress: 0,00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 166839,539 ops/s
# Warmup Iteration   2: 146984,873 ops/s
# Warmup Iteration   3: 154193,633 ops/s
# Warmup Iteration   4: 152365,007 ops/s
# Warmup Iteration   5: 183557,955 ops/s
Iteration   1: 166196,158 ops/s
Iteration   2: 181206,954 ops/s
Iteration   3: 184513,457 ops/s
Iteration   4: 162865,474 ops/s
Iteration   5: 184507,241 ops/s

# Run progress: 20,00% complete, ETA 00:06:41
# Fork: 2 of 5
# Warmup Iteration   1: 179088,813 ops/s
# Warmup Iteration   2: 190587,263 ops/s
# Warmup Iteration   3: 185754,161 ops/s
# Warmup Iteration   4: 154656,957 ops/s
# Warmup Iteration   5: 170732,061 ops/s
Iteration   1: 183857,048 ops/s
Iteration   2: 162485,608 ops/s
Iteration   3: 185091,657 ops/s
Iteration   4: 145355,980 ops/s
Iteration   5: 165822,779 ops/s

# Run progress: 40,00% complete, ETA 00:05:01
# Fork: 3 of 5
# Warmup Iteration   1: 152603,366 ops/s
# Warmup Iteration   2: 164393,506 ops/s
# Warmup Iteration   3: 181056,936 ops/s
# Warmup Iteration   4: 158605,971 ops/s
# Warmup Iteration   5: 160438,942 ops/s
Iteration   1: 155326,993 ops/s
Iteration   2: 187305,613 ops/s
Iteration   3: 203304,951 ops/s
Iteration   4: 203260,051 ops/s
Iteration   5: 202765,048 ops/s

# Run progress: 60,00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 150197,933 ops/s
# Warmup Iteration   2: 176528,990 ops/s
# Warmup Iteration   3: 190199,932 ops/s
# Warmup Iteration   4: 192179,351 ops/s
# Warmup Iteration   5: 142917,703 ops/s
Iteration   1: 194610,494 ops/s
Iteration   2: 197666,144 ops/s
Iteration   3: 190750,712 ops/s
Iteration   4: 155616,120 ops/s
Iteration   5: 182328,066 ops/s

# Run progress: 80,00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 143968,805 ops/s
# Warmup Iteration   2: 187171,691 ops/s
# Warmup Iteration   3: 188530,043 ops/s
# Warmup Iteration   4: 189438,912 ops/s
# Warmup Iteration   5: 200730,290 ops/s
Iteration   1: 188227,339 ops/s
Iteration   2: 197452,269 ops/s
Iteration   3: 172164,141 ops/s
Iteration   4: 174728,586 ops/s
Iteration   5: 190622,970 ops/s


Result "jsonvalues.benchmark.mutable.parsing.StringToJsObj_100.java_hash_map":
  180721,274 ±(99.9%) 12176,864 ops/s [Average]
  (min, avg, max) = (145355,980, 180721,274, 203304,951), stdev = 16255,765
  CI (99.9%): [168544,410, 192898,138] (assumes normal distribution)


# Run complete. Total time: 00:08:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                         Mode  Cnt       Score       Error  Units
StringToJsObj_100.java_hash_map  thrpt   25  180721,274 ± 12176,864  ops/s
