# JMH version: 1.21
# VM version: JDK 1.8.0_202, OpenJDK 64-Bit Server VM, 25.202-b05
# VM invoker: /Users/rmerino/.sdkman/candidates/java/8.0.202-zulu/jre/bin/java
# VM options: -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc-log-immutable-scala_vector-100.log
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jsonvalues.benchmark.immutable.parsing.StringToJsArray_100.scala_vector

# Run progress: 0,00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 189504,323 ops/s
# Warmup Iteration   2: 222092,218 ops/s
# Warmup Iteration   3: 222778,586 ops/s
# Warmup Iteration   4: 226930,601 ops/s
# Warmup Iteration   5: 226918,755 ops/s
Iteration   1: 226411,662 ops/s
Iteration   2: 226416,623 ops/s
Iteration   3: 226392,432 ops/s
Iteration   4: 224250,276 ops/s
Iteration   5: 224933,874 ops/s

# Run progress: 20,00% complete, ETA 00:06:42
# Fork: 2 of 5
# Warmup Iteration   1: 204912,519 ops/s
# Warmup Iteration   2: 224792,308 ops/s
# Warmup Iteration   3: 226044,570 ops/s
# Warmup Iteration   4: 225757,609 ops/s
# Warmup Iteration   5: 224103,632 ops/s
Iteration   1: 225960,117 ops/s
Iteration   2: 225689,918 ops/s
Iteration   3: 225580,805 ops/s
Iteration   4: 225924,843 ops/s
Iteration   5: 225713,920 ops/s

# Run progress: 40,00% complete, ETA 00:05:01
# Fork: 3 of 5
# Warmup Iteration   1: 200348,188 ops/s
# Warmup Iteration   2: 222215,878 ops/s
# Warmup Iteration   3: 221929,796 ops/s
# Warmup Iteration   4: 221900,099 ops/s
# Warmup Iteration   5: 222269,142 ops/s
Iteration   1: 222030,167 ops/s
Iteration   2: 220033,808 ops/s
Iteration   3: 222006,726 ops/s
Iteration   4: 221893,186 ops/s
Iteration   5: 221877,320 ops/s

# Run progress: 60,00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 205079,278 ops/s
# Warmup Iteration   2: 225146,215 ops/s
# Warmup Iteration   3: 212835,674 ops/s
# Warmup Iteration   4: 224194,751 ops/s
# Warmup Iteration   5: 224843,477 ops/s
Iteration   1: 224066,094 ops/s
Iteration   2: 225053,631 ops/s
Iteration   3: 224939,603 ops/s
Iteration   4: 222913,961 ops/s
Iteration   5: 225002,684 ops/s

# Run progress: 80,00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 205369,313 ops/s
# Warmup Iteration   2: 224977,256 ops/s
# Warmup Iteration   3: 225000,785 ops/s
# Warmup Iteration   4: 224975,069 ops/s
# Warmup Iteration   5: 222758,362 ops/s
Iteration   1: 224234,795 ops/s
Iteration   2: 224630,223 ops/s
Iteration   3: 224082,497 ops/s
Iteration   4: 224876,367 ops/s
Iteration   5: 224457,734 ops/s


Result "jsonvalues.benchmark.immutable.parsing.StringToJsArray_100.scala_vector":
  224374,931 ±(99.9%) 1268,165 ops/s [Average]
  (min, avg, max) = (220033,808, 224374,931, 226416,623), stdev = 1692,964
  CI (99.9%): [223106,765, 225643,096] (assumes normal distribution)


# Run complete. Total time: 00:08:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          Mode  Cnt       Score      Error  Units
StringToJsArray_100.scala_vector  thrpt   25  224374,931 ± 1268,165  ops/s
