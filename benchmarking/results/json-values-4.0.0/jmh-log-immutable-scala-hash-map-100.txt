# JMH version: 1.21
# VM version: JDK 1.8.0_202, OpenJDK 64-Bit Server VM, 25.202-b05
# VM invoker: /Users/rmerino/.sdkman/candidates/java/8.0.202-zulu/jre/bin/java
# VM options: -Xms256m -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc-log-immutable-scala-hash-map-100.log
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jsonvalues.benchmark.immutable.parsing.StringToJsObj_100.scala_hash_map

# Run progress: 0,00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 170930,842 ops/s
# Warmup Iteration   2: 195886,319 ops/s
# Warmup Iteration   3: 210695,900 ops/s
# Warmup Iteration   4: 212999,704 ops/s
# Warmup Iteration   5: 208357,984 ops/s
Iteration   1: 212291,812 ops/s
Iteration   2: 212509,173 ops/s
Iteration   3: 211881,687 ops/s
Iteration   4: 162605,521 ops/s
Iteration   5: 204643,583 ops/s

# Run progress: 20,00% complete, ETA 00:06:42
# Fork: 2 of 5
# Warmup Iteration   1: 207101,400 ops/s
# Warmup Iteration   2: 221709,665 ops/s
# Warmup Iteration   3: 220263,435 ops/s
# Warmup Iteration   4: 221053,708 ops/s
# Warmup Iteration   5: 222228,014 ops/s
Iteration   1: 221492,240 ops/s
Iteration   2: 222199,912 ops/s
Iteration   3: 222265,498 ops/s
Iteration   4: 220298,502 ops/s
Iteration   5: 221826,457 ops/s

# Run progress: 40,00% complete, ETA 00:05:01
# Fork: 3 of 5
# Warmup Iteration   1: 211204,625 ops/s
# Warmup Iteration   2: 223296,897 ops/s
# Warmup Iteration   3: 224016,119 ops/s
# Warmup Iteration   4: 214926,057 ops/s
# Warmup Iteration   5: 221774,122 ops/s
Iteration   1: 203647,675 ops/s
Iteration   2: 208000,528 ops/s
Iteration   3: 218258,593 ops/s
Iteration   4: 219497,036 ops/s
Iteration   5: 216390,733 ops/s

# Run progress: 60,00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 198018,399 ops/s
# Warmup Iteration   2: 215231,574 ops/s
# Warmup Iteration   3: 215100,725 ops/s
# Warmup Iteration   4: 214227,100 ops/s
# Warmup Iteration   5: 212596,319 ops/s
Iteration   1: 209757,687 ops/s
Iteration   2: 192340,239 ops/s
Iteration   3: 204530,687 ops/s
Iteration   4: 205598,763 ops/s
Iteration   5: 209474,647 ops/s

# Run progress: 80,00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 199645,313 ops/s
# Warmup Iteration   2: 214185,554 ops/s
# Warmup Iteration   3: 208862,938 ops/s
# Warmup Iteration   4: 210219,136 ops/s
# Warmup Iteration   5: 214558,354 ops/s
Iteration   1: 188487,763 ops/s
Iteration   2: 206024,528 ops/s
Iteration   3: 211517,183 ops/s
Iteration   4: 208842,982 ops/s
Iteration   5: 201288,270 ops/s


Result "jsonvalues.benchmark.immutable.parsing.StringToJsObj_100.scala_hash_map":
  208626,868 ±(99.9%) 9770,810 ops/s [Average]
  (min, avg, max) = (162605,521, 208626,868, 222265,498), stdev = 13043,751
  CI (99.9%): [198856,058, 218397,678] (assumes normal distribution)


# Run complete. Total time: 00:08:22

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          Mode  Cnt       Score      Error  Units
StringToJsObj_100.scala_hash_map  thrpt   25  208626,868 ± 9770,810  ops/s
