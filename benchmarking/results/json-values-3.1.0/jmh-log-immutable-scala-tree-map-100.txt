# JMH version: 1.21
# VM version: JDK 1.8.0_202, OpenJDK 64-Bit Server VM, 25.202-b05
# VM invoker: /Users/rmerino/.sdkman/candidates/java/8.0.202-zulu/jre/bin/java
# VM options: -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc-log-immutable-scala-tree-map-100.log
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jsonvalues.benchmark.immutable.parsing.StringToJsObj_100.scala_tree_map

# Run progress: 0,00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 105187,714 ops/s
# Warmup Iteration   2: 112685,182 ops/s
# Warmup Iteration   3: 112567,199 ops/s
# Warmup Iteration   4: 112591,246 ops/s
# Warmup Iteration   5: 112599,007 ops/s
Iteration   1: 112669,680 ops/s
Iteration   2: 112688,989 ops/s
Iteration   3: 112566,455 ops/s
Iteration   4: 112615,361 ops/s
Iteration   5: 112673,291 ops/s

# Run progress: 20,00% complete, ETA 00:06:41
# Fork: 2 of 5
# Warmup Iteration   1: 107798,089 ops/s
# Warmup Iteration   2: 114816,461 ops/s
# Warmup Iteration   3: 114913,549 ops/s
# Warmup Iteration   4: 114764,356 ops/s
# Warmup Iteration   5: 114889,709 ops/s
Iteration   1: 114832,678 ops/s
Iteration   2: 114720,249 ops/s
Iteration   3: 114850,355 ops/s
Iteration   4: 114633,506 ops/s
Iteration   5: 114750,625 ops/s

# Run progress: 40,00% complete, ETA 00:05:01
# Fork: 3 of 5
# Warmup Iteration   1: 105078,653 ops/s
# Warmup Iteration   2: 113762,515 ops/s
# Warmup Iteration   3: 113184,056 ops/s
# Warmup Iteration   4: 113351,359 ops/s
# Warmup Iteration   5: 113463,614 ops/s
Iteration   1: 113354,991 ops/s
Iteration   2: 113268,714 ops/s
Iteration   3: 113347,222 ops/s
Iteration   4: 113119,965 ops/s
Iteration   5: 113233,726 ops/s

# Run progress: 60,00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 106563,970 ops/s
# Warmup Iteration   2: 113267,415 ops/s
# Warmup Iteration   3: 113445,853 ops/s
# Warmup Iteration   4: 113485,101 ops/s
# Warmup Iteration   5: 113255,419 ops/s
Iteration   1: 113433,008 ops/s
Iteration   2: 113378,200 ops/s
Iteration   3: 113343,751 ops/s
Iteration   4: 113274,913 ops/s
Iteration   5: 113206,883 ops/s

# Run progress: 80,00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 107603,891 ops/s
# Warmup Iteration   2: 115498,758 ops/s
# Warmup Iteration   3: 115471,191 ops/s
# Warmup Iteration   4: 115502,201 ops/s
# Warmup Iteration   5: 115508,480 ops/s
Iteration   1: 115497,700 ops/s
Iteration   2: 115407,848 ops/s
Iteration   3: 115462,713 ops/s
Iteration   4: 115592,368 ops/s
Iteration   5: 115079,226 ops/s


Result "jsonvalues.benchmark.immutable.parsing.StringToJsObj_100.scala_tree_map":
  113880,097 ±(99.9%) 792,437 ops/s [Average]
  (min, avg, max) = (112566,455, 113880,097, 115592,368), stdev = 1057,880
  CI (99.9%): [113087,660, 114672,533] (assumes normal distribution)


# Run complete. Total time: 00:08:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          Mode  Cnt       Score     Error  Units
StringToJsObj_100.scala_tree_map  thrpt   25  113880,097 ± 792,437  ops/s
