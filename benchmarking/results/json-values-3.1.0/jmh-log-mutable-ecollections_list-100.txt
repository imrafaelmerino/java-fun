# JMH version: 1.21
# VM version: JDK 1.8.0_202, OpenJDK 64-Bit Server VM, 25.202-b05
# VM invoker: /Users/rmerino/.sdkman/candidates/java/8.0.202-zulu/jre/bin/java
# VM options: -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc-log-mutable-ecollections_list-100.log
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jsonvalues.benchmark.mutable.parsing.StringToJsArray_100.ecollections_list

# Run progress: 0,00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 111453,251 ops/s
# Warmup Iteration   2: 113244,064 ops/s
# Warmup Iteration   3: 130410,699 ops/s
# Warmup Iteration   4: 132799,182 ops/s
# Warmup Iteration   5: 137472,473 ops/s
Iteration   1: 143221,685 ops/s
Iteration   2: 139494,785 ops/s
Iteration   3: 117264,515 ops/s
Iteration   4: 137974,942 ops/s
Iteration   5: 123533,607 ops/s

# Run progress: 20,00% complete, ETA 00:06:41
# Fork: 2 of 5
# Warmup Iteration   1: 114975,001 ops/s
# Warmup Iteration   2: 102035,483 ops/s
# Warmup Iteration   3: 125035,396 ops/s
# Warmup Iteration   4: 111517,829 ops/s
# Warmup Iteration   5: 135680,957 ops/s
Iteration   1: 126733,970 ops/s
Iteration   2: 142849,583 ops/s
Iteration   3: 131515,663 ops/s
Iteration   4: 143298,774 ops/s
Iteration   5: 140944,655 ops/s

# Run progress: 40,00% complete, ETA 00:05:01
# Fork: 3 of 5
# Warmup Iteration   1: 105401,475 ops/s
# Warmup Iteration   2: 124469,307 ops/s
# Warmup Iteration   3: 136603,442 ops/s
# Warmup Iteration   4: 132986,577 ops/s
# Warmup Iteration   5: 112903,170 ops/s
Iteration   1: 125360,162 ops/s
Iteration   2: 109918,673 ops/s
Iteration   3: 124236,952 ops/s
Iteration   4: 112275,324 ops/s
Iteration   5: 101405,521 ops/s

# Run progress: 60,00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 119533,756 ops/s
# Warmup Iteration   2: 144237,909 ops/s
# Warmup Iteration   3: 151228,374 ops/s
# Warmup Iteration   4: 133254,823 ops/s
# Warmup Iteration   5: 146738,019 ops/s
Iteration   1: 148798,218 ops/s
Iteration   2: 146748,337 ops/s
Iteration   3: 150882,719 ops/s
Iteration   4: 154001,537 ops/s
Iteration   5: 150165,820 ops/s

# Run progress: 80,00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 125366,078 ops/s
# Warmup Iteration   2: 146102,405 ops/s
# Warmup Iteration   3: 146616,317 ops/s
# Warmup Iteration   4: 147820,006 ops/s
# Warmup Iteration   5: 147770,899 ops/s
Iteration   1: 147475,390 ops/s
Iteration   2: 146538,335 ops/s
Iteration   3: 144447,568 ops/s
Iteration   4: 146201,138 ops/s
Iteration   5: 146928,551 ops/s


Result "jsonvalues.benchmark.mutable.parsing.StringToJsArray_100.ecollections_list":
  136088,657 ±(99.9%) 10876,388 ops/s [Average]
  (min, avg, max) = (101405,521, 136088,657, 154001,537), stdev = 14519,666
  CI (99.9%): [125212,269, 146965,045] (assumes normal distribution)


# Run complete. Total time: 00:08:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                               Mode  Cnt       Score       Error  Units
StringToJsArray_100.ecollections_list  thrpt   25  136088,657 ± 10876,388  ops/s
