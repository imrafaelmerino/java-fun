# JMH version: 1.21
# VM version: JDK 1.8.0_202, OpenJDK 64-Bit Server VM, 25.202-b05
# VM invoker: /Users/rmerino/.sdkman/candidates/java/8.0.202-zulu/jre/bin/java
# VM options: -Xms256m -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc-log-mutable-jackson-object-100.log
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jsonvalues.benchmark.mutable.parsing.StringToJsObj_100.jackson

# Run progress: 0,00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 259512,621 ops/s
# Warmup Iteration   2: 132208,046 ops/s
# Warmup Iteration   3: 244507,065 ops/s
# Warmup Iteration   4: 259806,932 ops/s
# Warmup Iteration   5: 153621,992 ops/s
Iteration   1: 265777,739 ops/s
Iteration   2: 277564,464 ops/s
Iteration   3: 183754,033 ops/s
Iteration   4: 212733,224 ops/s
Iteration   5: 214466,323 ops/s

# Run progress: 20,00% complete, ETA 00:06:42
# Fork: 2 of 5
# Warmup Iteration   1: 272996,970 ops/s
# Warmup Iteration   2: 220040,100 ops/s
# Warmup Iteration   3: 240769,459 ops/s
# Warmup Iteration   4: 213203,761 ops/s
# Warmup Iteration   5: 295574,097 ops/s
Iteration   1: 298507,936 ops/s
Iteration   2: 298876,450 ops/s
Iteration   3: 301500,611 ops/s
Iteration   4: 300913,357 ops/s
Iteration   5: 297790,403 ops/s

# Run progress: 40,00% complete, ETA 00:05:01
# Fork: 3 of 5
# Warmup Iteration   1: 284330,721 ops/s
# Warmup Iteration   2: 304238,633 ops/s
# Warmup Iteration   3: 297760,389 ops/s
# Warmup Iteration   4: 304348,009 ops/s
# Warmup Iteration   5: 300713,807 ops/s
Iteration   1: 301558,507 ops/s
Iteration   2: 302491,494 ops/s
Iteration   3: 301146,244 ops/s
Iteration   4: 294290,289 ops/s
Iteration   5: 302887,186 ops/s

# Run progress: 60,00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 268338,646 ops/s
# Warmup Iteration   2: 266314,159 ops/s
# Warmup Iteration   3: 265517,828 ops/s
# Warmup Iteration   4: 230906,377 ops/s
# Warmup Iteration   5: 242567,241 ops/s
Iteration   1: 254749,128 ops/s
Iteration   2: 256969,442 ops/s
Iteration   3: 269212,754 ops/s
Iteration   4: 257650,832 ops/s
Iteration   5: 280078,297 ops/s

# Run progress: 80,00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 262210,733 ops/s
# Warmup Iteration   2: 270260,294 ops/s
# Warmup Iteration   3: 254227,699 ops/s
# Warmup Iteration   4: 261365,327 ops/s
# Warmup Iteration   5: 247885,478 ops/s
Iteration   1: 223955,946 ops/s
Iteration   2: 240164,016 ops/s
Iteration   3: 250277,824 ops/s
Iteration   4: 249815,736 ops/s
Iteration   5: 276415,954 ops/s


Result "jsonvalues.benchmark.mutable.parsing.StringToJsObj_100.jackson":
  268541,927 ±(99.9%) 25305,097 ops/s [Average]
  (min, avg, max) = (183754,033, 268541,927, 302887,186), stdev = 33781,580
  CI (99.9%): [243236,831, 293847,024] (assumes normal distribution)


# Run complete. Total time: 00:08:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                   Mode  Cnt       Score       Error  Units
StringToJsObj_100.jackson  thrpt   25  268541,927 ± 25305,097  ops/s
