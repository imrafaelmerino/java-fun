# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b18
# VM invoker: /Users/imrafaelmerino/.sdkman/candidates/java/8.0.232-zulu/jre/bin/java
# VM options: -Xms256m -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc-log-dslJson-object-100.log
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jsonvalues.benchmark.mutable.parsing.StringToJsObj_100.dslJson

# Run progress: 0.00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 26545.786 ops/s
# Warmup Iteration   2: 28930.634 ops/s
# Warmup Iteration   3: 25548.896 ops/s
# Warmup Iteration   4: 28385.973 ops/s
# Warmup Iteration   5: 29449.143 ops/s
Iteration   1: 29927.514 ops/s
Iteration   2: 31015.618 ops/s
Iteration   3: 30477.412 ops/s
Iteration   4: 30589.218 ops/s
Iteration   5: 29884.665 ops/s

# Run progress: 20.00% complete, ETA 00:06:42
# Fork: 2 of 5
# Warmup Iteration   1: 27369.121 ops/s
# Warmup Iteration   2: 29892.791 ops/s
# Warmup Iteration   3: 30399.070 ops/s
# Warmup Iteration   4: 30694.460 ops/s
# Warmup Iteration   5: 29785.225 ops/s
Iteration   1: 30584.788 ops/s
Iteration   2: 30463.355 ops/s
Iteration   3: 29701.651 ops/s
Iteration   4: 30495.275 ops/s
Iteration   5: 30335.266 ops/s

# Run progress: 40.00% complete, ETA 00:05:01
# Fork: 3 of 5
# Warmup Iteration   1: 27452.456 ops/s
# Warmup Iteration   2: 29953.504 ops/s
# Warmup Iteration   3: 30315.179 ops/s
# Warmup Iteration   4: 30202.166 ops/s
# Warmup Iteration   5: 30631.998 ops/s
Iteration   1: 30446.566 ops/s
Iteration   2: 29904.517 ops/s
Iteration   3: 30019.873 ops/s
Iteration   4: 29968.921 ops/s
Iteration   5: 30624.117 ops/s

# Run progress: 60.00% complete, ETA 00:03:21
# Fork: 4 of 5
# Warmup Iteration   1: 27857.758 ops/s
# Warmup Iteration   2: 30613.890 ops/s
# Warmup Iteration   3: 24215.481 ops/s
# Warmup Iteration   4: 30232.920 ops/s
# Warmup Iteration   5: 30035.061 ops/s
Iteration   1: 31279.563 ops/s
Iteration   2: 30197.693 ops/s
Iteration   3: 30083.367 ops/s
Iteration   4: 30987.460 ops/s
Iteration   5: 30822.975 ops/s

# Run progress: 80.00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 27525.358 ops/s
# Warmup Iteration   2: 30054.250 ops/s
# Warmup Iteration   3: 28468.010 ops/s
# Warmup Iteration   4: 29446.594 ops/s
# Warmup Iteration   5: 29694.674 ops/s
Iteration   1: 30271.697 ops/s
Iteration   2: 29622.405 ops/s
Iteration   3: 29112.385 ops/s
Iteration   4: 29466.286 ops/s
Iteration   5: 28878.012 ops/s


Result "jsonvalues.benchmark.mutable.parsing.StringToJsObj_100.dslJson":
  30206.424 ±(99.9%) 433.732 ops/s [Average]
  (min, avg, max) = (28878.012, 30206.424, 31279.563), stdev = 579.019
  CI (99.9%): [29772.692, 30640.155] (assumes normal distribution)


# Run complete. Total time: 00:08:22

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                   Mode  Cnt      Score     Error  Units
StringToJsObj_100.dslJson  thrpt   25  30206.424 ± 433.732  ops/s

Benchmark result is saved to jmh-result.json
