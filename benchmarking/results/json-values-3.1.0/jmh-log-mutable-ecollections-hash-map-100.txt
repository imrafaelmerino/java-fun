# JMH version: 1.21
# VM version: JDK 1.8.0_202, OpenJDK 64-Bit Server VM, 25.202-b05
# VM invoker: /Users/rmerino/.sdkman/candidates/java/8.0.202-zulu/jre/bin/java
# VM options: -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc-log-mutable-ecollections_hash_map-100.log
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jsonvalues.benchmark.mutable.parsing.StringToJsObj_100.ecollections_hash_map

# Run progress: 0,00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 125977,608 ops/s
# Warmup Iteration   2: 136160,694 ops/s
# Warmup Iteration   3: 136070,929 ops/s
# Warmup Iteration   4: 136089,412 ops/s
# Warmup Iteration   5: 135959,322 ops/s
Iteration   1: 135955,050 ops/s
Iteration   2: 136555,835 ops/s
Iteration   3: 136408,797 ops/s
Iteration   4: 136543,737 ops/s
Iteration   5: 136439,924 ops/s

# Run progress: 20,00% complete, ETA 00:06:41
# Fork: 2 of 5
# Warmup Iteration   1: 148635,784 ops/s
# Warmup Iteration   2: 163198,140 ops/s
# Warmup Iteration   3: 163411,259 ops/s
# Warmup Iteration   4: 163206,444 ops/s
# Warmup Iteration   5: 163177,643 ops/s
Iteration   1: 163355,305 ops/s
Iteration   2: 163358,878 ops/s
Iteration   3: 163280,435 ops/s
Iteration   4: 163362,660 ops/s
Iteration   5: 163491,862 ops/s

# Run progress: 40,00% complete, ETA 00:05:01
# Fork: 3 of 5
# Warmup Iteration   1: 148413,608 ops/s
# Warmup Iteration   2: 161258,958 ops/s
# Warmup Iteration   3: 161398,940 ops/s
# Warmup Iteration   4: 161363,424 ops/s
# Warmup Iteration   5: 161399,029 ops/s
Iteration   1: 160891,907 ops/s
Iteration   2: 161341,046 ops/s
Iteration   3: 161360,998 ops/s
Iteration   4: 161276,421 ops/s
Iteration   5: 161314,568 ops/s

# Run progress: 60,00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 152266,618 ops/s
# Warmup Iteration   2: 165408,169 ops/s
# Warmup Iteration   3: 165755,157 ops/s
# Warmup Iteration   4: 165626,058 ops/s
# Warmup Iteration   5: 165805,245 ops/s
Iteration   1: 165443,279 ops/s
Iteration   2: 165701,116 ops/s
Iteration   3: 165835,189 ops/s
Iteration   4: 165773,863 ops/s
Iteration   5: 165547,477 ops/s

# Run progress: 80,00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 132137,833 ops/s
# Warmup Iteration   2: 144370,758 ops/s
# Warmup Iteration   3: 144419,291 ops/s
# Warmup Iteration   4: 144251,009 ops/s
# Warmup Iteration   5: 144548,909 ops/s
Iteration   1: 144335,042 ops/s
Iteration   2: 144550,203 ops/s
Iteration   3: 143737,428 ops/s
Iteration   4: 130736,206 ops/s
Iteration   5: 144594,627 ops/s


Result "jsonvalues.benchmark.mutable.parsing.StringToJsObj_100.ecollections_hash_map":
  153647,674 ±(99.9%) 9485,006 ops/s [Average]
  (min, avg, max) = (130736,206, 153647,674, 165835,189), stdev = 12662,211
  CI (99.9%): [144162,668, 163132,680] (assumes normal distribution)


# Run complete. Total time: 00:08:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                 Mode  Cnt       Score      Error  Units
StringToJsObj_100.ecollections_hash_map  thrpt   25  153647,674 ± 9485,006  ops/s
