# JMH version: 1.21
# VM version: JDK 1.8.0_202, OpenJDK 64-Bit Server VM, 25.202-b05
# VM invoker: /Users/rmerino/.sdkman/candidates/java/8.0.202-zulu/jre/bin/java
# VM options: -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc-log-immutable-pcollections_hash_map-100.log
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jsonvalues.benchmark.immutable.parsing.StringToJsObj_100.pcollections_hash_map

# Run progress: 0,00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 95485,019 ops/s
# Warmup Iteration   2: 103013,228 ops/s
# Warmup Iteration   3: 102653,441 ops/s
# Warmup Iteration   4: 102650,173 ops/s
# Warmup Iteration   5: 102805,362 ops/s
Iteration   1: 102756,253 ops/s
Iteration   2: 102670,351 ops/s
Iteration   3: 102755,212 ops/s
Iteration   4: 102815,859 ops/s
Iteration   5: 102710,819 ops/s

# Run progress: 20,00% complete, ETA 00:06:41
# Fork: 2 of 5
# Warmup Iteration   1: 93657,803 ops/s
# Warmup Iteration   2: 99888,426 ops/s
# Warmup Iteration   3: 99937,012 ops/s
# Warmup Iteration   4: 100154,533 ops/s
# Warmup Iteration   5: 99939,514 ops/s
Iteration   1: 99959,182 ops/s
Iteration   2: 100010,627 ops/s
Iteration   3: 100047,982 ops/s
Iteration   4: 100085,812 ops/s
Iteration   5: 100018,553 ops/s

# Run progress: 40,00% complete, ETA 00:05:01
# Fork: 3 of 5
# Warmup Iteration   1: 96536,992 ops/s
# Warmup Iteration   2: 102111,648 ops/s
# Warmup Iteration   3: 102455,546 ops/s
# Warmup Iteration   4: 102514,042 ops/s
# Warmup Iteration   5: 101116,686 ops/s
Iteration   1: 102426,323 ops/s
Iteration   2: 102365,381 ops/s
Iteration   3: 102501,294 ops/s
Iteration   4: 102346,976 ops/s
Iteration   5: 102554,002 ops/s

# Run progress: 60,00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 95988,505 ops/s
# Warmup Iteration   2: 103365,604 ops/s
# Warmup Iteration   3: 103352,728 ops/s
# Warmup Iteration   4: 103488,264 ops/s
# Warmup Iteration   5: 103396,436 ops/s
Iteration   1: 103465,082 ops/s
Iteration   2: 103369,315 ops/s
Iteration   3: 103509,446 ops/s
Iteration   4: 103428,805 ops/s
Iteration   5: 103523,925 ops/s

# Run progress: 80,00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 94193,007 ops/s
# Warmup Iteration   2: 99839,308 ops/s
# Warmup Iteration   3: 99875,386 ops/s
# Warmup Iteration   4: 100083,875 ops/s
# Warmup Iteration   5: 99999,444 ops/s
Iteration   1: 100022,203 ops/s
Iteration   2: 100004,069 ops/s
Iteration   3: 100030,802 ops/s
Iteration   4: 100005,555 ops/s
Iteration   5: 100067,338 ops/s


Result "jsonvalues.benchmark.immutable.parsing.StringToJsObj_100.pcollections_hash_map":
  101738,047 ±(99.9%) 1099,579 ops/s [Average]
  (min, avg, max) = (99959,182, 101738,047, 103523,925), stdev = 1467,906
  CI (99.9%): [100638,468, 102837,625] (assumes normal distribution)


# Run complete. Total time: 00:08:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                 Mode  Cnt       Score      Error  Units
StringToJsObj_100.pcollections_hash_map  thrpt   25  101738,047 ± 1099,579  ops/s
