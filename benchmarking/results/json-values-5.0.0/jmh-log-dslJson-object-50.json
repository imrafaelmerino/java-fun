# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b18
# VM invoker: /Users/imrafaelmerino/.sdkman/candidates/java/8.0.232-zulu/jre/bin/java
# VM options: -Xms256m -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc-log-dslJson-object-50.log
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jsonvalues.benchmark.mutable.parsing.StringToJsObj_100.dslJson

# Run progress: 0.00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 35957.774 ops/s
# Warmup Iteration   2: 40053.656 ops/s
# Warmup Iteration   3: 39114.801 ops/s
# Warmup Iteration   4: 38317.906 ops/s
# Warmup Iteration   5: 38958.990 ops/s
Iteration   1: 36222.644 ops/s
Iteration   2: 37499.829 ops/s
Iteration   3: 40258.155 ops/s
Iteration   4: 39904.035 ops/s
Iteration   5: 40639.109 ops/s

# Run progress: 20.00% complete, ETA 00:06:42
# Fork: 2 of 5
# Warmup Iteration   1: 35947.504 ops/s
# Warmup Iteration   2: 39175.171 ops/s
# Warmup Iteration   3: 40423.789 ops/s
# Warmup Iteration   4: 38840.840 ops/s
# Warmup Iteration   5: 39749.425 ops/s
Iteration   1: 37457.659 ops/s
Iteration   2: 37783.519 ops/s
Iteration   3: 35624.837 ops/s
Iteration   4: 29067.385 ops/s
Iteration   5: 33107.908 ops/s

# Run progress: 40.00% complete, ETA 00:05:02
# Fork: 3 of 5
# Warmup Iteration   1: 31345.070 ops/s
# Warmup Iteration   2: 37800.216 ops/s
# Warmup Iteration   3: 38441.295 ops/s
# Warmup Iteration   4: 40106.224 ops/s
# Warmup Iteration   5: 37493.001 ops/s
Iteration   1: 39632.721 ops/s
Iteration   2: 40895.323 ops/s
Iteration   3: 39573.797 ops/s
Iteration   4: 39652.453 ops/s
Iteration   5: 38577.652 ops/s

# Run progress: 60.00% complete, ETA 00:03:21
# Fork: 4 of 5
# Warmup Iteration   1: 34623.888 ops/s
# Warmup Iteration   2: 39668.948 ops/s
# Warmup Iteration   3: 40024.919 ops/s
# Warmup Iteration   4: 39492.155 ops/s
# Warmup Iteration   5: 40945.448 ops/s
Iteration   1: 38094.404 ops/s
Iteration   2: 39506.336 ops/s
Iteration   3: 39068.245 ops/s
Iteration   4: 39836.984 ops/s
Iteration   5: 38194.757 ops/s

# Run progress: 80.00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 35063.957 ops/s
# Warmup Iteration   2: 39286.388 ops/s
# Warmup Iteration   3: 39747.989 ops/s
# Warmup Iteration   4: 37682.450 ops/s
# Warmup Iteration   5: 39645.330 ops/s
Iteration   1: 39689.463 ops/s
Iteration   2: 41102.144 ops/s
Iteration   3: 41035.265 ops/s
Iteration   4: 39930.284 ops/s
Iteration   5: 39804.930 ops/s


Result "jsonvalues.benchmark.mutable.parsing.StringToJsObj_100.dslJson":
  38486.394 ±(99.9%) 2022.667 ops/s [Average]
  (min, avg, max) = (29067.385, 38486.394, 41102.144), stdev = 2700.203
  CI (99.9%): [36463.726, 40509.061] (assumes normal distribution)


# Run complete. Total time: 00:08:23

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                   Mode  Cnt      Score      Error  Units
StringToJsObj_100.dslJson  thrpt   25  38486.394 ± 2022.667  ops/s

Benchmark result is saved to jmh-result.json
