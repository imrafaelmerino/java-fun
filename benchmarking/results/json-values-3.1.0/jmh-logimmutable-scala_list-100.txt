# JMH version: 1.21
# VM version: JDK 1.8.0_202, OpenJDK 64-Bit Server VM, 25.202-b05
# VM invoker: /Users/rmerino/.sdkman/candidates/java/8.0.202-zulu/jre/bin/java
# VM options: -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc-log-immutable-scala_list-100.log
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jsonvalues.benchmark.immutable.parsing.StringToJsArray_100.scala_list

# Run progress: 0,00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 11415,714 ops/s
# Warmup Iteration   2: 13346,388 ops/s
# Warmup Iteration   3: 13091,169 ops/s
# Warmup Iteration   4: 12959,467 ops/s
# Warmup Iteration   5: 13129,993 ops/s
Iteration   1: 12718,120 ops/s
Iteration   2: 10787,623 ops/s
Iteration   3: 12175,591 ops/s
Iteration   4: 12527,871 ops/s
Iteration   5: 13017,598 ops/s

# Run progress: 20,00% complete, ETA 00:06:41
# Fork: 2 of 5
# Warmup Iteration   1: 12903,812 ops/s
# Warmup Iteration   2: 13561,577 ops/s
# Warmup Iteration   3: 14311,594 ops/s
# Warmup Iteration   4: 13765,239 ops/s
# Warmup Iteration   5: 13711,027 ops/s
Iteration   1: 13524,304 ops/s
Iteration   2: 13550,292 ops/s
Iteration   3: 13840,313 ops/s
Iteration   4: 14077,932 ops/s
Iteration   5: 14111,209 ops/s

# Run progress: 40,00% complete, ETA 00:05:01
# Fork: 3 of 5
# Warmup Iteration   1: 12187,830 ops/s
# Warmup Iteration   2: 12894,806 ops/s
# Warmup Iteration   3: 13255,888 ops/s
# Warmup Iteration   4: 12975,594 ops/s
# Warmup Iteration   5: 13174,176 ops/s
Iteration   1: 13509,325 ops/s
Iteration   2: 13678,340 ops/s
Iteration   3: 13192,410 ops/s
Iteration   4: 10880,783 ops/s
Iteration   5: 12941,556 ops/s

# Run progress: 60,00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 12255,001 ops/s
# Warmup Iteration   2: 13262,745 ops/s
# Warmup Iteration   3: 13298,567 ops/s
# Warmup Iteration   4: 13512,307 ops/s
# Warmup Iteration   5: 13128,917 ops/s
Iteration   1: 13334,725 ops/s
Iteration   2: 13305,464 ops/s
Iteration   3: 13357,660 ops/s
Iteration   4: 13269,703 ops/s
Iteration   5: 11651,056 ops/s

# Run progress: 80,00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 11357,963 ops/s
# Warmup Iteration   2: 12363,158 ops/s
# Warmup Iteration   3: 12686,757 ops/s
# Warmup Iteration   4: 11537,050 ops/s
# Warmup Iteration   5: 13226,344 ops/s
Iteration   1: 13456,539 ops/s
Iteration   2: 12877,469 ops/s
Iteration   3: 12433,847 ops/s
Iteration   4: 13477,312 ops/s
Iteration   5: 13659,155 ops/s


Result "jsonvalues.benchmark.immutable.parsing.StringToJsArray_100.scala_list":
  13014,248 ±(99.9%) 652,951 ops/s [Average]
  (min, avg, max) = (10787,623, 13014,248, 14111,209), stdev = 871,671
  CI (99.9%): [12361,297, 13667,199] (assumes normal distribution)


# Run complete. Total time: 00:08:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                        Mode  Cnt      Score     Error  Units
StringToJsArray_100.scala_list  thrpt   25  13014,248 ± 652,951  ops/s
