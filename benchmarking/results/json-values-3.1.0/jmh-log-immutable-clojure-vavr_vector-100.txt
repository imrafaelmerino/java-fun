# JMH version: 1.21
# VM version: JDK 1.8.0_202, OpenJDK 64-Bit Server VM, 25.202-b05
# VM invoker: /Users/rmerino/.sdkman/candidates/java/8.0.202-zulu/jre/bin/java
# VM options: -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc-log-immutable-vavr_vector-100.log
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jsonvalues.benchmark.immutable.parsing.StringToJsArray_100.vavr_vector

# Run progress: 0,00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 63064,896 ops/s
# Warmup Iteration   2: 65710,568 ops/s
# Warmup Iteration   3: 66765,524 ops/s
# Warmup Iteration   4: 64775,829 ops/s
# Warmup Iteration   5: 64787,516 ops/s
Iteration   1: 66009,445 ops/s
Iteration   2: 66154,091 ops/s
Iteration   3: 61069,877 ops/s
Iteration   4: 56327,691 ops/s
Iteration   5: 61107,292 ops/s

# Run progress: 20,00% complete, ETA 00:06:41
# Fork: 2 of 5
# Warmup Iteration   1: 56938,576 ops/s
# Warmup Iteration   2: 50106,932 ops/s
# Warmup Iteration   3: 62383,104 ops/s
# Warmup Iteration   4: 65523,925 ops/s
# Warmup Iteration   5: 66022,476 ops/s
Iteration   1: 65168,278 ops/s
Iteration   2: 65813,854 ops/s
Iteration   3: 64241,237 ops/s
Iteration   4: 65630,932 ops/s
Iteration   5: 65055,074 ops/s

# Run progress: 40,00% complete, ETA 00:05:01
# Fork: 3 of 5
# Warmup Iteration   1: 62191,460 ops/s
# Warmup Iteration   2: 66374,594 ops/s
# Warmup Iteration   3: 65965,719 ops/s
# Warmup Iteration   4: 66252,717 ops/s
# Warmup Iteration   5: 66274,188 ops/s
Iteration   1: 62618,444 ops/s
Iteration   2: 63946,529 ops/s
Iteration   3: 62043,674 ops/s
Iteration   4: 58550,207 ops/s
Iteration   5: 60867,025 ops/s

# Run progress: 60,00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 47626,402 ops/s
# Warmup Iteration   2: 59567,436 ops/s
# Warmup Iteration   3: 64141,992 ops/s
# Warmup Iteration   4: 63414,485 ops/s
# Warmup Iteration   5: 57821,188 ops/s
Iteration   1: 61014,496 ops/s
Iteration   2: 62521,599 ops/s
Iteration   3: 57727,297 ops/s
Iteration   4: 63456,111 ops/s
Iteration   5: 60418,517 ops/s

# Run progress: 80,00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 31661,613 ops/s
# Warmup Iteration   2: 33146,611 ops/s
# Warmup Iteration   3: 17337,084 ops/s
# Warmup Iteration   4: 24782,885 ops/s
# Warmup Iteration   5: 51431,120 ops/s
Iteration   1: 63006,219 ops/s
Iteration   2: 45664,748 ops/s
Iteration   3: 55455,177 ops/s
Iteration   4: 60643,349 ops/s
Iteration   5: 51231,113 ops/s


Result "jsonvalues.benchmark.immutable.parsing.StringToJsArray_100.vavr_vector":
  61029,691 ±(99.9%) 3636,868 ops/s [Average]
  (min, avg, max) = (45664,748, 61029,691, 66154,091), stdev = 4855,115
  CI (99.9%): [57392,823, 64666,559] (assumes normal distribution)


# Run complete. Total time: 00:08:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                         Mode  Cnt      Score      Error  Units
StringToJsArray_100.vavr_vector  thrpt   25  61029,691 ± 3636,868  ops/s
